<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Nateriver's Blog]]></title>
  <subtitle><![CDATA[Learning and Thinking]]></subtitle>
  <link href="nateriver520.github.io/atom.xml" rel="self"/>
  <link href="nateriver520.github.io"/>
  <updated>2013-12-01T16:11:42.461Z</updated>
  <id>nateriver520.github.io/</id>
  <author>
    <name><![CDATA[Shuo Yang]]></name>
    <email><![CDATA[shuo.yang@yahoo.com]]></email>
  </author>
  <generator uri="http://zespia.tw/hexo">Hexo</generator>
  <entry>
    <title type="html"><![CDATA[Pig On Mac]]></title>
    <link href="nateriver520.github.io/2013/11/26/pig-on-mac/"/>
    <id>nateriver520.github.io/2013/11/26/pig-on-mac/</id>
    <published>2013-11-26T02:14:19.000Z</published>
    <updated>2013-11-26T02:28:40.000Z</updated>
    <content type="html"><![CDATA[<h2>Install</h2>
<p>首先是 Mac OS 下的安装</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre> <span class="keyword">export</span> JAVA_HOME=$(/usr/libexec/java_home)
 brew <span class="keyword">install</span> pig
</pre></td></tr></table></figure>

<h2>Run</h2>
<p>Pig 运行分为两种模式，如果需要在本地调试的话，可以使用 shell 模式。</p>
<p>通过运行下面的 command 就行了</p>
<p><strong><em>Shell mode</em></strong></p>
<figure class="highlight lang-shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre> <span class="title">pig</span> -x local
</pre></td></tr></table></figure>

<h2>Count Words</h2>
<p>下面我们用个简单的统计单词次数的例子做进入 pig 世界的 hello world。</p>
<p>首先我们在网上随便找一篇文章做实验。</p>
<a id="more"></a>

<p>word.txt</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>Thanks again <span class="keyword">for</span> <span class="keyword">the</span> great answers <span class="keyword">and</span> links! Some people comment <span class="keyword">that</span> <span class="keyword">it</span> <span class="keyword">is</span> hard <span class="keyword">to</span> satisfy <span class="keyword">the</span> criteria because core algorithms are
so pervasive <span class="keyword">that</span> <span class="keyword">it</span>'s hard <span class="keyword">to</span> point <span class="keyword">to</span> a specific use. I see <span class="keyword">the</span> difficulty. But I think <span class="keyword">it</span> <span class="keyword">is</span> worthwhile <span class="keyword">to</span> come up <span class="keyword">with</span> specific
examples because <span class="keyword">in</span> <span class="keyword">my</span> experience telling people: <span class="string">"Look, algorithms are important because they are just about everywhere!"</span> <span class="keyword">does</span> <span class="keyword">not</span> work
</pre></td></tr></table></figure>

<p>接下来我们进入  <strong><em>shell</em></strong> 模式，一行行输入下面的语句来看结果。</p>
<figure class="highlight lang-pig"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre>input_file =  load '<span class="property">words</span>.txt' <span class="keyword">as</span> (line);

/* TOKENIZE: split line <span class="keyword">into</span> <span class="property">word</span> column */
<span class="property">words</span> = FOREACH input_file GENERATE FLATTEN(TOKENIZE(line)) <span class="keyword">as</span> <span class="property">word</span>;

grpd = GROUP <span class="property">words</span> <span class="keyword">by</span> <span class="property">word</span>;

cntd = FOREACH grpd GENERATE group, COUNT(<span class="property">words</span>);

/* print <span class="constant">result</span> */
dump cntd;
</pre></td></tr></table></figure>

<p>最后键入 <strong><em>dump cntd</em></strong> 的时候可以看到单词数目已经统计出来了</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="list">(<span class="title">answers</span><span class="body">,<span class="number">1</span>)</span></span>
<span class="list">(<span class="title">because</span><span class="body">,<span class="number">3</span>)</span></span>
<span class="list">(<span class="title">comment</span><span class="body">,<span class="number">1</span>)</span></span>
<span class="list">(<span class="title">people</span><span class="body">:,<span class="number">1</span>)</span></span>
<span class="list">(<span class="title">satisfy</span><span class="body">,<span class="number">1</span>)</span></span>
<span class="list">(<span class="title">telling</span><span class="body">,<span class="number">1</span>)</span></span>
<span class="list">(<span class="title">criteria</span><span class="body">,<span class="number">1</span>)</span></span>
<span class="list">(<span class="title">examples</span><span class="body">,<span class="number">1</span>)</span></span>
<span class="list">(<span class="title">specific</span><span class="body">,<span class="number">2</span>)</span></span>
<span class="list">(<span class="title">important</span><span class="body">,<span class="number">1</span>)</span></span>
<span class="list">(<span class="title">pervasive</span><span class="body">,<span class="number">1</span>)</span></span>
<span class="list">(<span class="title">algorithms</span><span class="body">,<span class="number">2</span>)</span></span>
<span class="list">(<span class="title">experience</span><span class="body">,<span class="number">1</span>)</span></span>
<span class="list">(<span class="title">worthwhile</span><span class="body">,<span class="number">1</span>)</span></span>
<span class="list">(<span class="title">difficulty</span><span class="body">.,<span class="number">1</span>)</span></span>
<span class="list">(<span class="title">everywhere</span><span class="body">!,<span class="number">1</span>)</span></span>
</pre></td></tr></table></figure>

<h2>More Complicate Example</h2>
<p><strong><em>Pig</em></strong> 作为一简单实用的 hadoop 操作语言，同 SQL 的语法类似，支持 join, filter, group by 等操作.</p>
<p>下面我们用个更复杂的例子来看看这门语言的有趣的地方。</p>
<p>我们首先伪造一部分数据,这些数据以空格分开<br>   - 第一行代表用户id<br>   - 第二行 type: 其中 p 代表用户看过改页面，c 代表用户点击广告<br>   - 第三行 用户看过的url</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>    user1 p <span class="transposed_variable">news.</span><span class="number">21</span><span class="transposed_variable">cn.</span>com/social/daqian/<span class="number">2008</span>/<span class="number">05</span>/<span class="number">29</span>/<span class="number">4777194</span><span class="transposed_variable">_1.</span>shtml
    user2 c <span class="transposed_variable">www.</span><span class="number">6</span><span class="transposed_variable">wei.</span>net/dianshiju/????\xa1\xe9|????do=index
    user1 p <span class="transposed_variable">www.</span><span class="transposed_variable">shanziba.</span>com/
    user1 p <span class="transposed_variable">download.</span><span class="transposed_variable">it168.</span>com/<span class="number">18</span>/<span class="number">1805</span>/<span class="number">13947</span>/<span class="number">13947</span><span class="transposed_variable">_3.</span>shtml
    user2 p <span class="transposed_variable">you.</span><span class="transposed_variable">video.</span><span class="transposed_variable">sina.</span><span class="transposed_variable">com.</span>cn/b/<span class="number">5924814</span>-<span class="number">1246200450.</span>html
    user3 c <span class="transposed_variable">www.</span><span class="transposed_variable">shanziba.</span>com/
    user1 c <span class="transposed_variable">download.</span><span class="transposed_variable">it168.</span>com/<span class="number">18</span>/<span class="number">1805</span>/<span class="number">13947</span>/<span class="number">13947</span><span class="transposed_variable">_3.</span>shtml
    user3 p <span class="transposed_variable">you.</span><span class="transposed_variable">video.</span><span class="transposed_variable">sina.</span><span class="transposed_variable">com.</span>cn/b/<span class="number">5924814</span>-<span class="number">1246200450.</span>html
    user1 c 
    user3 p
</pre></td></tr></table></figure>

<p>首先我们想统计每个用户在我们的log 中发生了多少次行为。</p>
<figure class="highlight lang-pig"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>Users = LOAD <span class="attribute">'server_log</span>.txt' USING PigStorage(' ') as (user ,<span class="keyword">type</span> ,url) ;

<span class="comment">/* filter bad log */</span>
Fltrd = FILTER Users by url <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;

Grpd = <span class="keyword">GROUP</span> Fltrd by user;

Cntd = foreach Grpd <span class="keyword">generate</span> FLATTEN(<span class="keyword">group</span>), COUNT(Fltrd.user);

DUMP Cntd;
</pre></td></tr></table></figure>

<p>输出如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="list">(<span class="title">user1</span><span class="body">,<span class="number">4</span>)</span></span>
<span class="list">(<span class="title">user2</span><span class="body">,<span class="number">2</span>)</span></span>
<span class="list">(<span class="title">user3</span><span class="body">,<span class="number">2</span>)</span></span>
</pre></td></tr></table></figure>

<p>如果我们想更进一步，查看每个用户发生了多少次click 和多少次 page view. 则稍显麻烦。</p>
<p>首先我们要把page event 和 click event 分开，这可以通过 pig 的 <strong><em> split </em></strong> 实现。</p>
<p>接着针对分开的 P_EVENT 和 C_EVENT 做 <strong><em>Group</em></strong>。</p>
<p>最后在使用 <strong><em>Join</em></strong> 命令把 Cntd_P 和 Cntd_C 按用户 join 起来。</p>
<figure class="highlight lang-pig"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre><span class="title">Users</span> = LOAD <span class="string">'server_log.txt'</span> USING PigStorage(<span class="string">' '</span>) as (user ,type ,url) ;

<span class="title">Fltrd</span> = FILTER Users by url is not null;

<span class="title">SPLIT</span> Fltrd INTO P_EVENT if type == <span class="string">'p'</span>, 
                 C_EVENT if type == <span class="string">'c'</span>; 

<span class="title">Grpd_P</span> = GROUP P_EVENT by user;
<span class="title">Grpd_C</span> = GROUP C_EVENT by user;

<span class="title">Cntd_P</span> = foreach Grpd_P generate FLATTEN(group) as group_p,COUNT(P_EVENT.user) as p_count;
<span class="title">Cntd_C</span> = foreach Grpd_C generate FLATTEN(group) as group_c, COUNT(C_EVENT.user) as c_count;


<span class="title">Jnd</span> = JOIN Cntd_P BY group_p, Cntd_C BY group_c; 

<span class="title">Cntd_P_C</span> = FOREACH Jnd GENERATE Cntd_P::group_p, Cntd_P::p_count,Cntd_C::c_count;


<span class="title">DUMP</span> Cntd_P_C;
</pre></td></tr></table></figure>

<h2>Tips</h2>
<p>总体来看 pig 作为一门类 SQL 语言，其灵活性和方便性在处理较为简单的大数据任务时，相比传统的 hadoop job 有着不可比拟的优势。</p>
<p>但 pig 也有缺点，比如 debug 信息不明确等。 </p>
<p>在日常写 pig 脚本时，可以通过 <strong><em>Describe</em></strong> 的方式来查看当前结果的结构来方便编码。</p>
]]></content>
    <category scheme="nateriver520.github.io/tags/Hadoop/" term="Hadoop"/>
    <category scheme="nateriver520.github.io/tags/Pig/" term="Pig"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[jing js (二)]]></title>
    <link href="nateriver520.github.io/2013/11/10/jing-js-(二)/"/>
    <id>nateriver520.github.io/2013/11/10/jing-js-(二)/</id>
    <published>2013-11-10T01:34:05.000Z</published>
    <updated>2013-11-10T06:01:07.000Z</updated>
    <content type="html"><![CDATA[<h2>Javascript Engine</h2>
<h3>Parser</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>  <span class="literal">-</span> <span class="comment">Usually</span> <span class="comment">generates</span> <span class="comment">AST
</pre></td></tr></table></figure>

<h3>Runtime</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>  <span class="literal">-</span> <span class="comment">Value</span> <span class="comment">representation</span>
  <span class="literal">-</span> <span class="comment">Object</span> <span class="comment">model</span>
    <span class="literal">-</span> <span class="comment">Dictionary</span> <span class="comment">mode</span>
    <span class="literal">-</span> <span class="comment">Fast</span> <span class="comment">mode</span>
  <span class="literal">-</span> <span class="comment">Built</span>-<span class="comment">in</span> <span class="comment">Objects</span>
  <span class="literal">-</span> <span class="comment">Misc
</pre></td></tr></table></figure>

<h3>Execution Engine</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>  <span class="literal">-</span> <span class="comment">Execute</span> <span class="comment">code
</pre></td></tr></table></figure>

<h3>GC</h3>
<h3>Foreign Function Interface (FFI)</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>  - Handle interaction between JS <span class="keyword">and</span> <span class="string">"the outside world"</span>
  - JS call out to native <span class="function"><span class="keyword">function</span>
  - <span class="title">Native</span> <span class="title">function</span> <span class="title">call</span> <span class="title">into</span> <span class="title">JS</span> <span class="title">function</span>
</pre></td></tr></table></figure>

<h3>Debugger</h3>
<p><a id="more"></a></p>
<h2>Http is Hard</h2>
<h3>Http?</h3>
<h3>Response code</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre> - <span class="number">418</span> code <span class="keyword">is</span> a joke
 - <span class="number">5</span>xx <span class="built_in">server</span> <span class="keyword">error</span>
</pre></td></tr></table></figure>

<h3>Client Methods</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre> <span class="literal">-</span> <span class="comment">POST</span>
 <span class="literal">-</span> <span class="comment">GET</span>
 <span class="literal">-</span> <span class="comment">PUT</span>
 <span class="literal">-</span> <span class="comment">DELETE
</pre></td></tr></table></figure>

<h2>Lean Development with Node.js</h2>
<h3>Founding a company</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre> - Find problem <span class="keyword">and</span> want <span class="keyword">to</span> fix <span class="keyword">it</span>
 - A little crazy
</pre></td></tr></table></figure>

<h3>Customer Interviews</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre> <span class="literal">-</span> <span class="comment">open</span> <span class="comment">ended</span> <span class="comment">questions</span>
 <span class="literal">-</span> <span class="comment">people</span> <span class="comment">you</span> <span class="comment">don't</span> <span class="comment">know
</pre></td></tr></table></figure>

<h3>Why node.js?</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre> <span class="literal">-</span> <span class="comment">community</span>
 <span class="literal">-</span> <span class="comment">open</span> <span class="comment">minded</span>
 <span class="literal">-</span> <span class="comment">data</span> <span class="comment">collection
</pre></td></tr></table></figure>

<h3>Open minded</h3>
<h3>Toolkit</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre> <span class="literal">-</span> <span class="comment">Express</span>
 <span class="literal">-</span> <span class="comment">Postgres</span>
 <span class="literal">-</span> <span class="comment">Node</span>-<span class="comment">orm</span>
 <span class="literal">-</span> <span class="comment">Underscore</span>
 <span class="literal">-</span> <span class="comment">Request</span>
 <span class="literal">-</span> <span class="comment">Moment</span>
 <span class="literal">-</span> <span class="comment">Phantom</span>.<span class="comment">js
</pre></td></tr></table></figure>

<h3>Resources</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre> <span class="literal">-</span> <span class="comment">The</span> <span class="comment">Lean</span> <span class="comment">Startup</span>
 <span class="literal">-</span> <span class="comment">The</span> <span class="comment">Four</span> <span class="comment">Steps</span> <span class="comment">to</span> <span class="comment">the</span> <span class="comment">Epiphany
</pre></td></tr></table></figure>

<h2>The Hitchhiker&#39;s Guide</h2>
<h3>Server side</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre> <span class="literal">-</span> <span class="comment">express
</pre></td></tr></table></figure>

<h3>Single-page app?</h3>
<h3>Client Side</h3>
<h3>WebRTC</h3>
<h3>Framework</h3>
<h3>Client Side</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>  <span class="literal">-</span> <span class="comment">CommonJS</span>
  <span class="literal">-</span> <span class="comment">Require</span> <span class="string">.</span><span class="comment">js</span>
  <span class="literal">-</span> <span class="comment">Angular</span>
  <span class="literal">-</span> <span class="comment">Ember
</pre></td></tr></table></figure>

<h3>Github</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="attribute">jingjs-talk
</pre></td></tr></table></figure>

]]></content>
    <category scheme="nateriver520.github.io/tags/life/" term="life"/>
    <category scheme="nateriver520.github.io/tags/js/" term="js"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[jing js (一)]]></title>
    <link href="nateriver520.github.io/2013/11/09/jing-js-(一)/"/>
    <id>nateriver520.github.io/2013/11/09/jing-js-(一)/</id>
    <published>2013-11-09T12:52:30.000Z</published>
    <updated>2013-11-10T06:02:03.000Z</updated>
    <content type="html"><![CDATA[<h2>Info</h2>
<p>这次<strong><em>lyk</em></strong>同学北上，参加 <a href="http://jingjs.org/" target="_blank">jingjs</a> ,我托lyk童鞋的福，也去jing js打了次酱油。</p>
<p>以下是本次大会两天议程的简要笔记。</p>
<h2>A Better World for node.js</h2>
<h3>Debug</h3>
<p>node-inspector</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">slc</span> <span class="built_in">debug</span> blog
</pre></td></tr></table></figure>

<h3>Performance</h3>
<p><strong><em>strongOps</em></strong></p>
<p>First  sign up to get app key.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">slc</span> strongops [options]
</pre></td></tr></table></figure>

<p><a id="more"></a></p>
<h2>Bitcoin</h2>
<h3>Coinpunk</h3>
<p>open source bitcoin wallet</p>
<p>We cannot put key in web server.</p>
<p>Move <strong><em>bitcoin key</em></strong> to brower</p>
<p>Libraries</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre> <span class="literal">-</span> <span class="comment">Cryptojs</span>
 <span class="literal">-</span> <span class="comment">SJCL</span>
 <span class="literal">-</span> <span class="comment">JSBN</span>
 <span class="literal">-</span> <span class="comment">BigNumber</span>.<span class="comment">js</span>
 <span class="literal">-</span> <span class="comment">BitcoinJS</span>-<span class="comment">LIB</span>
 <span class="literal">-</span> <span class="comment">RandJS
</pre></td></tr></table></figure>

<h2>My year with Node.js</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">code</span> + tests + documentation = <span class="module"><span class="keyword">module</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre> <span class="literal">-</span> <span class="comment">code</span>
  <span class="literal">-</span> <span class="comment">implementation</span>
  <span class="literal">-</span> <span class="comment">interfaces</span>
 <span class="literal">-</span> <span class="comment">test</span>
 <span class="literal">-</span> <span class="comment">documentation
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="type">Everything</span> is a <span class="module"><span class="keyword">module</span>, once finish, you can open source
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>Service <span class="keyword">is</span>  provided  <span class="keyword">by</span> modules
System  <span class="keyword">is</span>  provided  <span class="keyword">by</span> services
</pre></td></tr></table></figure>

<h2>Substack</h2>
<h3>run</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre>curl http://<span class="number">192.168</span><span class="number">.1</span><span class="number">.129</span>:<span class="number">5000</span>/modules.tar.gz | tar xz
Inside you will find <span class="number">3</span> adventures:
learnyounode - learn <span class="keyword">the</span> basics <span class="keyword">of</span> node
stream-adventure - learn you <span class="keyword">to</span> use streams <span class="keyword">in</span> node
levelmeup - learn <span class="keyword">the</span> basics <span class="keyword">of</span> leveldb
To <span class="command">run</span> an adventure, do `npm <span class="command">run</span> $ADVENTURE` like this:
npm <span class="command">run</span> stream-adventure
To <span class="command">run</span> <span class="keyword">the</span> leveldb adventures, you will need <span class="keyword">to</span> <span class="command">run</span> `npm rebuild` <span class="keyword">to</span> rebuild <span class="keyword">the</span> leveldb bindings <span class="keyword">for</span> your platform <span class="keyword">if</span> you're <span class="keyword">not</span> <span class="property">running</span> x64 linux.
</pre></td></tr></table></figure>

<h3>level db</h3>
<h3>cities1000</h3>
<h2>CPUJS</h2>
<h3>用户端CPU性能监控</h3>
<ul>
<li>通过执行时间来衡量, 超过100ms 就感觉很慢, 所以把100ms当成顶峰。</li>
<li>卡的占比 LTP(Lag Time Percentage)</li>
</ul>
<h3>任务式编程调度</h3>
<ul>
<li>one task = one function or one function includes a lot of functions.</li>
</ul>
<figure class="highlight lang-js"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>   CPUJS.load(foo());
</pre></td></tr></table></figure>

<h3>Task Manager</h3>
<ul>
<li>Loading tasks</li>
<li>Killing tasks </li>
</ul>
<h2>Zero to Ready With Geddy</h2>
<h3>Geddy</h3>
<ul>
<li>Start server</li>
<li>Generators</li>
<li>Run jake</li>
</ul>
<h2>On BigPipe On Node.js</h2>
<h3>On Bigpipe</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">Improve</span> web page loading performance by facebook
</pre></td></tr></table></figure>

<ul>
<li>Chunked Encoding<ul>
<li>content length vs chunked encoding ?</li>
<li>chunked encoding don&#39;t need write content length, just use <strong><em>res.write</em></strong></li>
</ul>
</li>
<li>Zoom in Bussiness Logic part<ul>
<li>every part have different time to gernerate. </li>
<li>But  Chunked Encoding cannot transfer part by part.</li>
</ul>
</li>
<li>Bigpipe<ul>
<li>bigpipe can do this.</li>
<li>browser use javascript to show page by Chunked Encoding</li>
</ul>
</li>
<li>Why node for Bigpipe?<ul>
<li>HTML generate by Front developer.</li>
</ul>
</li>
</ul>
<h2>Pemelo…Untitled</h2>
<h3>What?</h3>
<ul>
<li>game server framework</li>
<li>Realtime users online game</li>
</ul>
<h3>Framework</h3>
<ul>
<li>Abstract servers </li>
<li>Abstract request/response and broadcast/push</li>
<li>rpc framework</li>
</ul>
<h3>Evolution</h3>
<ul>
<li>Pemelo connector</li>
<li>Message compress</li>
<li>Reliability<ul>
<li>Zookeeper</li>
</ul>
</li>
<li>New features<ul>
<li>Plugin mechanism</li>
<li>Crontab &amp; Filter</li>
</ul>
</li>
</ul>
<h3>Message push platform</h3>
<ul>
<li>long connection</li>
<li>Use<ul>
<li>Baidu </li>
<li>SNDA </li>
<li>jpush </li>
<li>getui</li>
</ul>
</li>
<li>Framework<ul>
<li>Zookeeper</li>
<li>Redis</li>
<li>MQTT</li>
<li>Socket IO</li>
</ul>
</li>
<li>Broadcast Message<ul>
<li>Create channel</li>
<li>Filter clients</li>
</ul>
</li>
<li>Multiplex link<ul>
<li>Share one link with push-server</li>
</ul>
</li>
<li>Tips<ul>
<li>remeber bind <strong><em>cpu</em></strong></li>
</ul>
</li>
</ul>
<h2>Data Visualization</h2>
<h3>junk charts</h3>
<h3>Lying</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>  - size <span class="keyword">of</span> effect <span class="keyword">of</span> show <span class="typedef"><span class="keyword">data</span></span>
  - pie is bad for you
</pre></td></tr></table></figure>

<h3>what can we do?</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>  <span class="literal">-</span> <span class="comment">less</span> <span class="comment">is</span> <span class="comment">more</span>
  <span class="literal">-</span> <span class="comment">use</span> <span class="comment">a</span> <span class="comment">table
</pre></td></tr></table></figure>

<h3>Modern tools</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>  <span class="literal">-</span> <span class="comment">d3</span>
  <span class="literal">-</span> <span class="comment">Canvas</span> <span class="comment">vs</span> <span class="comment">SVG</span>
  <span class="literal">-</span> <span class="comment">Interactivity</span>
  <span class="literal">-</span> <span class="comment">Extensibility</span>
   <span class="literal">-</span> <span class="comment">Google</span> <span class="comment">Charts
</pre></td></tr></table></figure>

<h3>tips</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>  <span class="literal">-</span> <span class="comment">indeed</span>
  <span class="literal">-</span> <span class="comment">find</span> <span class="comment">job
</pre></td></tr></table></figure>

]]></content>
    <category scheme="nateriver520.github.io/tags/life/" term="life"/>
    <category scheme="nateriver520.github.io/tags/js/" term="js"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Thrift入门 (一)]]></title>
    <link href="nateriver520.github.io/2013/11/06/thrift入门-(一)/"/>
    <id>nateriver520.github.io/2013/11/06/thrift入门-(一)/</id>
    <published>2013-11-06T06:22:06.000Z</published>
    <updated>2013-11-06T06:53:17.000Z</updated>
    <content type="html"><![CDATA[<h2>Install</h2>
<p>Go to <a href="http://thrift.apache.org/download/" target="_blank">thrift</a> page download thrift.</p>
<figure class="highlight lang-shell"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre><span class="title">brew</span> install boost
 ./configure <span class="comment">--without-python</span>
<span class="title">sudo</span> make
<span class="title">sudo</span> make install
</pre></td></tr></table></figure>

<h2>Maven</h2>
<p>add depndency</p>
<figure class="highlight lang-xml"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">dependency</span>&gt;</span>
    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.apache.thrift<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>libthrift<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
    <span class="tag">&lt;<span class="title">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="title">version</span>&gt;</span>
<span class="tag">&lt;/<span class="title">dependency</span>&gt;</span>

<span class="tag">&lt;<span class="title">dependency</span>&gt;</span>
  <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
  <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
  <span class="tag">&lt;<span class="title">version</span>&gt;</span>1.6.6<span class="tag">&lt;/<span class="title">version</span>&gt;</span>
<span class="tag">&lt;/<span class="title">dependency</span>&gt;</span>

<span class="tag">&lt;<span class="title">dependency</span>&gt;</span>
  <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
  <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
  <span class="tag">&lt;<span class="title">version</span>&gt;</span>1.6.6<span class="tag">&lt;/<span class="title">version</span>&gt;</span>
<span class="tag">&lt;/<span class="title">dependency</span>&gt;</span>

<span class="tag">&lt;<span class="title">dependency</span>&gt;</span>
  <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
  <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
  <span class="tag">&lt;<span class="title">version</span>&gt;</span>1.2.16<span class="tag">&lt;/<span class="title">version</span>&gt;</span>
<span class="tag">&lt;/<span class="title">dependency</span>&gt;</span>
</pre></td></tr></table></figure>

<p><a id="more"></a><br>add plugin</p>
<figure class="highlight lang-xml"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">plugin</span>&gt;</span>
    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.apache.thrift.tools<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>maven-thrift-plugin<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
    <span class="tag">&lt;<span class="title">version</span>&gt;</span>0.1.10<span class="tag">&lt;/<span class="title">version</span>&gt;</span>
    <span class="tag">&lt;<span class="title">configuration</span>&gt;</span>
        <span class="tag">&lt;<span class="title">thriftExecutable</span>&gt;</span>/usr/local/bin/thrift<span class="tag">&lt;/<span class="title">thriftExecutable</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">configuration</span>&gt;</span>
    <span class="tag">&lt;<span class="title">executions</span>&gt;</span>
        <span class="tag">&lt;<span class="title">execution</span>&gt;</span>
            <span class="tag">&lt;<span class="title">id</span>&gt;</span>thrift-sources<span class="tag">&lt;/<span class="title">id</span>&gt;</span>
            <span class="tag">&lt;<span class="title">phase</span>&gt;</span>generate-sources<span class="tag">&lt;/<span class="title">phase</span>&gt;</span>
            <span class="tag">&lt;<span class="title">goals</span>&gt;</span>
                <span class="tag">&lt;<span class="title">goal</span>&gt;</span>compile<span class="tag">&lt;/<span class="title">goal</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">goals</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">execution</span>&gt;</span>
        <span class="tag">&lt;<span class="title">execution</span>&gt;</span>
            <span class="tag">&lt;<span class="title">id</span>&gt;</span>thrift-test-sources<span class="tag">&lt;/<span class="title">id</span>&gt;</span>
            <span class="tag">&lt;<span class="title">phase</span>&gt;</span>generate-test-sources<span class="tag">&lt;/<span class="title">phase</span>&gt;</span>
            <span class="tag">&lt;<span class="title">goals</span>&gt;</span>
                <span class="tag">&lt;<span class="title">goal</span>&gt;</span>testCompile<span class="tag">&lt;/<span class="title">goal</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">goals</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">execution</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">executions</span>&gt;</span>
<span class="tag">&lt;/<span class="title">plugin</span>&gt;</span>
</pre></td></tr></table></figure>

<h2>Hello World</h2>
<p>Now we can define our service.</p>
<p>first create the file <strong><em>test.thrift</em></strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="class"><span class="keyword">namespace</span> <span class="title">java</span> <span class="title">com</span>.<span class="title">app</span>.<span class="title">testThrift</span>
<span class="title">service</span> <span class="title">Test</span>{</span>

 <span class="keyword">void</span> say(<span class="number">1</span>: <span class="keyword">string</span> word)

}
</pre></td></tr></table></figure>

<p>We define a function <strong><em>say</em></strong>, then we run command to generate java class</p>
<figure class="highlight lang-shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="comment">thrift</span>  <span class="literal">-</span><span class="literal">-</span><span class="comment">gen</span> <span class="comment">java</span> <span class="comment">test</span>.<span class="comment">thrfit
</pre></td></tr></table></figure>

<p>We copy the class to our java project. and implements the <strong><em>test.Iface</em></strong> interface</p>
<figure class="highlight lang-java"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestImpl</span> <span class="keyword">implements</span> <span class="title">Test</span>.<span class="title">Iface</span> {</span>
    <span class="keyword">public</span> <span class="keyword">void</span> say(String word) <span class="keyword">throws</span> TException{
        System.out.println(<span class="string">"I am server, I want to say: "</span> + word);
    }
}
</pre></td></tr></table></figure>

<p>Now we build the service to let server say something.</p>
<figure class="highlight lang-java"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> {</span>
    <span class="keyword">public</span> <span class="keyword">void</span> startServer() {
        <span class="keyword">try</span> {

            TServerSocket serverTransport = <span class="keyword">new</span> TServerSocket(<span class="number">1234</span>);

            Test.Processor process = <span class="keyword">new</span> Processor(<span class="keyword">new</span> TestImpl());

            Factory portFactory = <span class="keyword">new</span> TBinaryProtocol.Factory(<span class="keyword">true</span>, <span class="keyword">true</span>);

            Args args = <span class="keyword">new</span> Args(serverTransport);
            args.processor(process);
            args.protocolFactory(portFactory);

            TServer server = <span class="keyword">new</span> TThreadPoolServer(args);
            server.serve();
        } <span class="keyword">catch</span> (TTransportException e) {
            e.printStackTrace();
        }
    }

    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) {
        Server server = <span class="keyword">new</span> Server();
        server.startServer();
    }
}
</pre></td></tr></table></figure>

<p>We also should have a client to send word.</p>
<figure class="highlight lang-java"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="code"><pre><span class="keyword">import</span> org.apache.thrift.TException;
<span class="keyword">import</span> org.apache.thrift.protocol.TBinaryProtocol;
<span class="keyword">import</span> org.apache.thrift.protocol.TProtocol;
<span class="keyword">import</span> org.apache.thrift.transport.TSocket;
<span class="keyword">import</span> org.apache.thrift.transport.TTransport;
<span class="keyword">import</span> org.apache.thrift.transport.TTransportException;

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> {</span>
    <span class="keyword">public</span> <span class="keyword">void</span> startClient() {
        TTransport transport;
        <span class="keyword">try</span> {
            transport = <span class="keyword">new</span> TSocket(<span class="string">"localhost"</span>, <span class="number">1234</span>);
            TProtocol protocol = <span class="keyword">new</span> TBinaryProtocol(transport);
            Test.Client client = <span class="keyword">new</span> Test.Client(protocol);
            transport.open();
            client.say(<span class="string">" Hello I am client"</span>);
            transport.close();
        } <span class="keyword">catch</span> (TTransportException e) {
            e.printStackTrace();
        } <span class="keyword">catch</span> (TException e) {
            e.printStackTrace();
        }
    }

    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main(String[] args) {
        Client client = <span class="keyword">new</span> Client();
        client.startClient();
    }
}
</pre></td></tr></table></figure>

<p>Now when start <strong><em>server</em></strong> and run <strong><em>client</em></strong>, the message will show like this:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>I am <span class="keyword">server</span>, I want to say:  Hello I am <span class="keyword">client</span>
</pre></td></tr></table></figure>

<h2>Reference</h2>
<p><a href="http://roclinux.cn/?p=3316" target="_blank">Linux大棚版Thrift入门教程</a></p>
<p><a href="http://www.cnblogs.com/johnc/archive/2011/06/19/2084508.html" target="_blank">Thrift java服务器与客户端示例</a></p>
]]></content>
    <category scheme="nateriver520.github.io/tags/thrift/" term="thrift"/>
    <category scheme="nateriver520.github.io/tags/maven/" term="maven"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[永远不要放弃做梦的权利]]></title>
    <link href="nateriver520.github.io/2013/11/03/永远不要放弃做梦的权利/"/>
    <id>nateriver520.github.io/2013/11/03/永远不要放弃做梦的权利/</id>
    <published>2013-11-02T16:34:36.000Z</published>
    <updated>2013-11-02T16:41:08.000Z</updated>
    <content type="html"><![CDATA[<h2>引言</h2>
<p>时间过的真快，自己不知不觉已经工作了6个多月，又到了新一年的毕业季，突然翻出去年此时写的一篇文章还是蛮有感慨的。</p>
<h2>去年</h2>
<p>前不久终于下了决定在腾讯、微软(苏州)、EMC、Yahoo四家公司中选择Yahoo，去遥远的帝都开始另一段新的旅程。回首求职的9月到11月这三个月，可以说觉得疲惫而又充满了挑战，这是人生是一段不可多得的经历，下面我会以关键词的形式分享这段时间里的心得。</p>
<p><a id="more"></a></p>
<h2>有了开始，永远不晚</h2>
<p>似乎从一开始，自己就属于慢热型的人。在研一的时候，自己并没有打算将来从事IT行业的工作，所以基本上就没有怎么写过代码。后来到了研二看周围的同学纷纷出去实习，由于自己迟迟没有下定决心，便决定找家IT公司实习一下，记忆中那段时间是最苦闷的日子，海投了很多公司：IBM、思科、EMC等等，每每看到实习生岗位的职位描述感觉都是被BS的节奏，于是自己下定决心恶补一下，听从师兄、师姐的建议，看了《XX宝典》等一系列书籍，还看了各种面经以及参照职位描述上的各知识点广撒网，在那两周里面，前期遭到了IBM、爱立信等一系列公司的BS，后来在痛定思过，在地铁、实验室等各种环境不间断的恶补知识，那段时间真是自己最努力的时候，最后收到了EMC和思科的Offer，最终依照实习岗位的喜好选择了EMC，从此踏上了IT行业的不归路。</p>
<p>可以说自己从正式进入IT行业到最终开始找工作，只学习了9个月的编程，但是这段时间足够你找到你满意的东西，只要有了开始。</p>
<h2>遇到挫折，永不放弃</h2>
<p>正式开始找工作是从9月中旬开始的，因为自己一直在EMC实习，所以EMC内部的实习生招聘Green Channel开始的比较早，所以就那时就开始准备了，经过一个周末带上一个周一的复习后，比较幸运的通过面试，最终拿到了EMC的offer。</p>
<p>但是我并不想重点讲这段内容，我更想说的是，在接到EMC<br>Offer的那天中午，班长突然短信说有家名为中软的公司在学校招聘，年薪还行，当时抱着练兵的心态就和我的同学们浩浩荡荡的去笔试面试了，这是我找工作以来最惨痛的一次失败，宣讲会后，就直接开始笔试了，我二话不说选了我当时最拿手的.NET来做，做下来感觉很好，以至于当招聘人员叫我名字的时候，我一度是以为叫我去面试，结果只是冷冰冰的说了句“同学，你可以回去了。”全场100多人，我作为仅有的几个被BS的人灰溜溜的离开了会议室，当时场面的尴尬可想而知，后来我在实验室坐了很久，思考到底是什么问题导致了这次失败，我意识到我能拿到EMC的Offer纯粹是幸运，而自己的基础知识一塌糊涂，如果在这样下去，我最终只能呆在EMC而看不到外面的天空。</p>
<p>很快的中兴的第二次笔试如期而至，有了第一次的惨痛失败，我不敢轻敌，从这家公司的历年试卷开始认真准备，无奈时间太短，中兴基本上全是C语言、C++的题目，而自己对这方面基本没有实际的编码经验，结果可想而知笔试题目做的一塌糊涂，不过中兴似乎不看重笔试成绩，成功进入了面试，在后来做性格测试时选择放弃了中兴。</p>
<p>再后来十一长假的到，来给我了一段宝贵的缓冲期，本来打算回家的我果断选择放弃，利用十一好好的过了遍《C++ Primer》等一系列的书籍，至此最擅长的语言变成C++（^_^）。</p>
<p>这段经历告诉我，挫折会出现在每个人的旅途上，永不放弃，迎难而上吧，少年。</p>
<h2>好基友必不可少</h2>
<p>在EMC实习的这段时候，我、小Z还有PP是本科早就相识的同学，后来一个契机小Z接了一个关于Sina Weibo的项目，我厚着脸皮加入了小z的微博项目组，在小z和PP同学的带领下开始了Ruby的编程之旅。那段时间说起来是我最为繁忙的时候，白天在EMC实习，回来后会继续写代码到凌晨，周末通常也会搭进去，但是这段时间却是最开心的时候，感觉到无比的充实，后来我们找工作的时候，也结成了小分队，相互扶持，定期聚餐，让找工作这个无比让人烦躁的过程，变成了一段美好的回忆。</p>
<p>其实找工作的时候，项目经历会占到一个非常重要的比重，如果面试官感兴趣，面试官会不停的追问下去，如果相谈甚欢会有个不错的加成分，我们当时接到微博这个项目可以说非常幸运，让我们三个人在项目经历这块有了不错印象分。</p>
<p>最后小z去了思科，PP去了建行。</p>
<p>截止到目前为止，这个项目还在运行中，上面的数据已接近了1亿。</p>
<h2>追随自己的内心</h2>
<p>在EMC实习的这段时间里面，自己逐渐喜欢了IT行业，当时收到小Z等一干人的熏陶，自己内心已经有了方向，想去一家互联网公司，参与一个伟大项目，让很多人使用，享受其中的成就感，所以在找工作开始我的目标锁定了国内的腾讯和百度。</p>
<p>说来有趣，直到找工作的最后，我还是没修正我笔试弱，面试强的特点，在笔试腾讯的前一天晚上，我第一次失眠，因为我知道这是我加入这家公司的唯一机会，必须好好把握，结果笔试出来和周围的同学一对答案，知道自己错了不少，心里对腾讯是否给面试机会完全没底，心里不停的对自己说如果腾讯给我机会面试我一定会拿到offer，我始终记得腾讯发面试通知的那个下午，我还在地铁上由于迟迟收不到面试短信而心急如焚，以至于突然收到短信时，我高兴的跳了起来还吓了周围的人一跳，后来参加面试反而没有了当初的窘迫，一路顺风接到offer。</p>
<p>再后来我陆续拿到了yahoo和微软的Offer，最终面临四选一的选择，一开始打算选择腾讯，一个是职位还行，还有就是位置在上海，可以和同学合租比较有趣，直到后来有天下午接到了yahoo open day的邀请，我抱着去看看的心态，去帝都参与了这次活动，结果在经过了yahoo的项目介绍后，我开始犹豫了，我反复的问自己：“这些项目不是正是我梦想中想参与的，能够影响无数人人的项目吗？”在经过咨询数人后，最终选定了Yahoo公司。</p>
<p>其实在写下这个关键词的时候，我自己也不知道选择是对还是不对，但是自己就是这么一路走过来的，当初实习选EMC等等都是如此，即便将来不顺，自己也不会后悔，毕竟人生转瞬即逝，追寻自己的理想才是真正的活过。</p>
<p>以上就是我的求职心得，这篇并不是各大公司的面经，如果你想看面经，各大论坛都有很多，我更想从一个过来人的角度讲述我这段路上的所思所想，希望能帮到你想起些什么。</p>
<p>最后，感谢下一起求职的战友们-小Z、PP等等，没有你们，这段路程不会这么有趣^_^。</p>
]]></content>
    <category scheme="nateriver520.github.io/tags/life/" term="life"/>
    <category scheme="nateriver520.github.io/tags/求职/" term="求职"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[用Express搭建 blog (一)]]></title>
    <link href="nateriver520.github.io/2013/11/02/用express搭建-blog-(一)/"/>
    <id>nateriver520.github.io/2013/11/02/用express搭建-blog-(一)/</id>
    <published>2013-11-02T15:46:58.000Z</published>
    <updated>2013-11-02T16:00:30.000Z</updated>
    <content type="html"><![CDATA[<h2>Info</h2>
<p>公司马上要举行 hack day 了，这次决定和小伙伴用 Express 作为框架来搭建我们的应用，所以昨天搭出来UI后，今天开始系统的学习下 Express。</p>
<h2>Start</h2>
<p>首先是express的全局设置。</p>
<figure class="highlight lang-shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>su<span class="operator"><span class="keyword">do</span> npm install -g express
</pre></td></tr></table></figure>

<p>接着我们试着用express搭建一个简单的blog程序<br>在work path 运行命令</p>
<figure class="highlight lang-shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">express</span> -e ejs blog
</pre></td></tr></table></figure>

<p>可以看到express已经帮你创建了一系列的模板程序。接着进入blog目录安装ejs等相关依赖。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">cd</span> blog && npm install
</pre></td></tr></table></figure>

<p>运行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">node</span> app
</pre></td></tr></table></figure>

<p>并访问<a href="http://localhost:3000/" target="_blank">http://localhost:3000/</a> ,简单的hello world 程序已经生成。</p>
<a id="more"></a>


<p>下面来看下程序的整个结构，运行command</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">tree</span> -I  node*
</pre></td></tr></table></figure>

<p>express的模板程序结构看起来和rails的结构很相像。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre>├── app<span class="variable">.js</span>
├── package<span class="variable">.json</span>
├── <span class="keyword">public</span>
│   ├── images
│   ├── javascripts
│   └── stylesheets
│       └── style<span class="variable">.css</span>
├── routes
│   ├── index<span class="variable">.js</span>
│   └── user<span class="variable">.js</span>
└── views
    └── index<span class="variable">.ejs</span>
</pre></td></tr></table></figure>

<h2>Blog Design</h2>
<p>对express的模板程序有了基本概念后，我们开始来实现一个稍微复杂的blog。<br>blog 需要实现下面的功能。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>/：首页
/login：登录
/reg：注册
/post：发表文章
/logout：登出
</pre></td></tr></table></figure>

<p>blog 的数据存储采用mongodb。</p>
<h2>Improve</h2>
<p>首先我门先简单的改进下我们当前的blog程序。</p>
<p>首先是重写默认的路由</p>
<p>在 <strong><em>app.js</em></strong> 里面我们可以看到以下两行语句。</p>
<figure class="highlight lang-javascript"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>app.get(<span class="string">'/'</span>, routes.index);
app.get(<span class="string">'/users'</span>, user.list);
</pre></td></tr></table></figure>

<p>我们把这部分代码移到 <strong><em>routes/index.js</em></strong> 使代码结构看起来更为清晰。</p>
<figure class="highlight lang-js"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="code"><pre>module.exports = <span class="keyword">function</span>(app){    
    app.get(<span class="string">'/'</span>,<span class="keyword">function</span>(req,res){
        res.render(<span class="string">'index'</span>, { title: <span class="string">'主页'</span> });
    });
    app.get(<span class="string">'/reg'</span>,<span class="keyword">function</span>(req,res){
        res.render(<span class="string">'reg'</span>, { title: <span class="string">'注册'</span> });
    });
    app.post(<span class="string">'/reg'</span>,<span class="keyword">function</span>(req,res){
    });
    app.get(<span class="string">'/login'</span>,<span class="keyword">function</span>(req,res){
        res.render(<span class="string">'login'</span>, { title: <span class="string">'登录'</span> });
    });
    app.post(<span class="string">'/login'</span>,<span class="keyword">function</span>(req,res){
    });
    app.get(<span class="string">'/logout'</span>,<span class="keyword">function</span>(req,res){
    });
    app.get(<span class="string">'/post'</span>,<span class="keyword">function</span>(req,res){
        res.render(<span class="string">'post'</span>, { title: <span class="string">'发表'</span> });
    });
    app.post(<span class="string">'/post'</span>,<span class="keyword">function</span>(req,res){
    }); 
};
</pre></td></tr></table></figure>

<p>同时在 <strong><em>app.js</em></strong>里将上面两行代码替换成。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="function"><span class="title">routes</span><span class="params">(app)</span>;
</pre></td></tr></table></figure>

<p>Ok,接下来我们添加相应的ejs，实现后的前端界面结构应该如图所示。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>└── views
    ├── footer<span class="variable">.ejs</span>
    ├── header<span class="variable">.ejs</span>
    ├── index<span class="variable">.ejs</span>
    ├── login<span class="variable">.ejs</span>
    └── reg<span class="variable">.ejs</span>
</pre></td></tr></table></figure>

<p><strong><em>footer.ejs</em></strong></p>
<figure class="highlight lang-html"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="tag">&lt;/<span class="title">article</span>&gt;</span>
<span class="tag">&lt;/<span class="title">body</span>&gt;</span>
<span class="tag">&lt;/<span class="title">html</span>&gt;</span>
</pre></td></tr></table></figure>

<p><strong><em>header.ejs</em></strong></p>
<figure class="highlight lang-html"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre><span class="doctype">&lt;!DOCTYPE html&gt;</span>
<span class="tag">&lt;<span class="title">html</span>&gt;</span>
<span class="tag">&lt;<span class="title">head</span>&gt;</span>
<span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"Content-Type"</span> <span class="attribute">content</span>=<span class="value">"text/html; charset=UTF-8"</span>&gt;</span>
<span class="tag">&lt;<span class="title">title</span>&gt;</span>Blog<span class="tag">&lt;/<span class="title">title</span>&gt;</span>
<span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"stylesheets/style.css"</span>&gt;</span>
<span class="tag">&lt;/<span class="title">head</span>&gt;</span>
<span class="tag">&lt;<span class="title">body</span>&gt;</span>

<span class="tag">&lt;<span class="title">header</span>&gt;</span>
<span class="tag">&lt;<span class="title">h1</span>&gt;</span><span class="vbscript">&lt;%= title %&gt;</span><span class="tag">&lt;/<span class="title">h1</span>&gt;</span>
<span class="tag">&lt;/<span class="title">header</span>&gt;</span>

<span class="tag">&lt;<span class="title">nav</span>&gt;</span>
<span class="tag">&lt;<span class="title">span</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">title</span>=<span class="value">"主页"</span> <span class="attribute">href</span>=<span class="value">"/"</span>&gt;</span>home<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>
<span class="tag">&lt;<span class="title">span</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">title</span>=<span class="value">"登录"</span> <span class="attribute">href</span>=<span class="value">"/login"</span>&gt;</span>login<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>
<span class="tag">&lt;<span class="title">span</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">title</span>=<span class="value">"注册"</span> <span class="attribute">href</span>=<span class="value">"/reg"</span>&gt;</span>register<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>
<span class="tag">&lt;/<span class="title">nav</span>&gt;</span>
<span class="tag">&lt;<span class="title">article</span>&gt;</span>
</pre></td></tr></table></figure>

<p><strong><em>index.ejs</em></strong></p>
<figure class="highlight lang-html"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="vbscript">&lt;%- include header %&gt;</span>
这是主页
<span class="vbscript">&lt;%- include footer %&gt;</span>
</pre></td></tr></table></figure>

<p><strong><em>login.ejs</em></strong></p>
<figure class="highlight lang-html"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="vbscript">&lt;%- include header %&gt;</span>
<span class="tag">&lt;<span class="title">form</span> <span class="attribute">method</span>=<span class="value">"post"</span>&gt;</span>
用户名：<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"username"</span> /&gt;</span><span class="tag">&lt;<span class="title">br</span> /&gt;</span>
密码：   <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"password"</span> <span class="attribute">name</span>=<span class="value">"password"</span> /&gt;</span><span class="tag">&lt;<span class="title">br</span> /&gt;</span>
        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"submit"</span> <span class="attribute">value</span>=<span class="value">"登录"</span> /&gt;</span>
<span class="tag">&lt;/<span class="title">form</span>&gt;</span>
<span class="vbscript">&lt;%- include footer %&gt;</span>
</pre></td></tr></table></figure>

<p><strong><em>reg.ejs</em></strong></p>
<figure class="highlight lang-html"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="vbscript">&lt;%- include header %&gt;</span>
<span class="tag">&lt;<span class="title">form</span> <span class="attribute">method</span>=<span class="value">"post"</span>&gt;</span>
用户名：<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"username"</span> /&gt;</span><span class="tag">&lt;<span class="title">br</span> /&gt;</span>
密码：    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"password"</span> <span class="attribute">name</span>=<span class="value">"password"</span> /&gt;</span><span class="tag">&lt;<span class="title">br</span> /&gt;</span>
确认密码：<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"password"</span> <span class="attribute">name</span>=<span class="value">"password-repeat"</span> /&gt;</span><span class="tag">&lt;<span class="title">br</span> /&gt;</span>
        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"submit"</span> <span class="attribute">value</span>=<span class="value">"注册"</span> /&gt;</span>
<span class="tag">&lt;/<span class="title">form</span>&gt;</span>
<span class="vbscript">&lt;%- include footer %&gt;</span>
</pre></td></tr></table></figure>

<p>上面所做的工作简单的概括来说就是把整个 blog 的  header 和 footer 分离开，并按此建立相应的登陆，注册页面。</p>
<p>可以通过访问<a href="http://localhost:3000/" target="_blank">http://localhost:3000/</a> 来查看当前主页。</p>
<h2>mongo db</h2>
<p>首先是安装。mac下安装mongodb很简单。</p>
<figure class="highlight lang-shell"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="title">brew</span> update
<span class="title">brew</span> install mongodb
</pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight lang-shell"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>mongo
&gt; <span class="transposed_variable">db.</span><span class="transposed_variable">test.</span>save(<span class="cell">{a:<span class="number">1</span>}</span>)
&gt; <span class="transposed_variable">db.</span><span class="transposed_variable">test.</span><span class="built_in">find</span>()
</pre></td></tr></table></figure>

<p>mongo db装上后 开始安装node js的依赖。</p>
<p>在 <strong><em>package.json</em></strong> 中加入。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="string">"mongodb"</span>:<span class="string">"<span class="variable">*"</span>,
"</span><span class="keyword">connect</span>-mongo<span class="string">":"</span><span class="variable">*"</span>
</pre></td></tr></table></figure>

<p>运行</p>
<figure class="highlight lang-shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">npm</span> install
</pre></td></tr></table></figure>

<p>安装完成后，我们就能够在程序中对mongo db进行操作了。</p>
<p>我们在blog下面新建 <strong><em>settings.js</em></strong> 用来存储我们blog程序的相关配置。</p>
<figure class="highlight lang-javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>module.exports = { 
  cookieSecret: <span class="string">'myblog'</span>, 
  db: <span class="string">'blog'</span>, 
  host: <span class="string">'localhost'</span>
};
</pre></td></tr></table></figure>

<p>创建 <strong><em>models</em></strong> 目录并新建 js 文件 <strong><em>db.js</em></strong> 用来操作 db</p>
<figure class="highlight lang-javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="keyword">var</span> settings = require(<span class="string">'../settings'</span>),
    Db = require(<span class="string">'mongodb'</span>).Db,
    Connection = require(<span class="string">'mongodb'</span>).Connection,
    Server = require(<span class="string">'mongodb'</span>).Server;
module.exports = <span class="keyword">new</span> Db(settings.db, <span class="keyword">new</span> Server(settings.host, Connection.DEFAULT_PORT, {}));
</pre></td></tr></table></figure>

<p>而Package <strong><em>connect-mongo</em></strong> 是用来存储会话信息到数据库。</p>
<p>在 <strong><em>app.js</em></strong> 中添加。</p>
<figure class="highlight lang-javascript"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="keyword">var</span> MongoStore = require(<span class="string">'connect-mongo'</span>)(express);
<span class="keyword">var</span> settings = require(<span class="string">'./settings'</span>);
</pre></td></tr></table></figure>

<p>同时在 <strong><em>app.use(express.methodOverride())</em></strong> 后面添加</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre>app<span class="preprocessor">.use</span>(express<span class="preprocessor">.cookieParser</span>())<span class="comment">;</span>
app<span class="preprocessor">.use</span>(express<span class="preprocessor">.session</span>({ 
      secret: settings<span class="preprocessor">.cookieSecret</span>, 
      store: new MongoStore({ 
      db: settings<span class="preprocessor">.db</span> 
   }) 
}))<span class="comment">;</span>
</pre></td></tr></table></figure>

<p>其中 express.cookieParser() 是 Cookie 解析的中间件。express.session() 则提供会话支持，设置它的 store 参数为 MongoStore 实例，把会话信息存储到数据库中，以避免丢失。<br>在后面的小节中，我们可以通过 req.session 获取当前用户的会话对象，以维护用户相关的信息。”<br>至此，数据库的配置工作完成了，后面我们就可以用数据库了。</p>
<h2>结论</h2>
<p>Express的代码结构看起来还是蛮清晰的，npm上的第三方的资源也很丰富。</p>
<p>由于本人是Express的初学者，所以整个 blog 的过程也是完全参考 <a href="http://cnodejs.org/topic/515b00096d382773061927de" target="_blank">【一起学node.js （一）】用node+express搭建多人博客</a> 这篇blog的内容，在此也感谢下原作者。</p>
<h2>参考</h2>
<p><a href="http://cnodejs.org/topic/515b00096d382773061927de" target="_blank">【一起学node.js （一）】用node+express搭建多人博客</a></p>
]]></content>
    <category scheme="nateriver520.github.io/tags/nodejs/" term="nodejs"/>
    <category scheme="nateriver520.github.io/tags/express/" term="express"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Mac OS 10.9 软件环境故障排查]]></title>
    <link href="nateriver520.github.io/2013/11/02/mac-os-109-软件环境故障排查/"/>
    <id>nateriver520.github.io/2013/11/02/mac-os-109-软件环境故障排查/</id>
    <published>2013-11-02T13:20:08.000Z</published>
    <updated>2013-11-02T13:21:55.000Z</updated>
    <content type="html"><![CDATA[<p>之前在10.7上搭配好了一系列的软件环境。</p>
<p>在升级到10.9后，基本上所有的软件环境都没有了。</p>
<p>试图通过 brew 安装 mongo db 也编译出错。本篇 blog 就是基于上述问题的一系列排查。</p>
<a id="more"></a>

<h3>brew</h3>
<p>首先是查看 brew 是否有问题。</p>
<figure class="highlight lang-shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">brew</span> doctor
</pre></td></tr></table></figure>

<p>然后按照 brew 列出的各项 warning fix。</p>
<p>这样的话再装 mongo db 就没问题了。</p>
<h3>rvm</h3>
<p>在继续装rvm的时候遇到安装完成后，始终找不到rvm的问题。</p>
<p>通过echo的方法，发现当前 Terminal 加载的配置位于 <strong><em>/etc/profile</em></strong></p>
<p>所以一开始 source 一下就好了。</p>
<p>这样就能成功的找到 rvm</p>
<h3>参考</h3>
<p><a href="http://www.interworks.com/blogs/ckaukis/2013/03/05/installing-ruby-200-rvm-and-homebrew-mac-os-x-108-mountain-lion" target="_blank">Installing Ruby 2.0.0 with RVM and Homebrew on Mac OS X 10.8 Mountain Lion</a></p>
<p><a href="http://railsapps.github.io/installrubyonrails-mac.html" target="_blank">Install Ruby on Rails · Mac OS X Mavericks</a></p>
]]></content>
    <category scheme="nateriver520.github.io/tags/macos/" term="macos"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[使用 Node.js 做 Function Test]]></title>
    <link href="nateriver520.github.io/2013/10/19/使用-nodejs-做-function-test/"/>
    <id>nateriver520.github.io/2013/10/19/使用-nodejs-做-function-test/</id>
    <published>2013-10-19T07:20:48.000Z</published>
    <updated>2013-11-02T15:51:46.000Z</updated>
    <content type="html"><![CDATA[<h2>Info</h2>
<p>上周 meeting 上同事说他们现在在用 java 写 function test，产生了很多冗余的代码，整个项目也变得比较臃肿。现在迫切需要个简单的模板项目能快速搭建function test。</p>
<p>后来我回去想了想，为什么我们非得用 java 来做 function test 呢? </p>
<p>Node.js 应该是个不错的选择，并且对 json 有着天然的支持，于是回去在 github 上随手一搜，还果真有相关的项目: <a href="https://github.com/masylum/testosterone" target="_blank">testosterone</a>，于是便有了这篇blog.</p>
<a id="more"></a>

<h2>Server</h2>
<p>要做demo，自然要有相应的server来支撑。</p>
<p>在这里我们选用Express作为server。</p>
<p>首先我们建立一个server的文件夹，新建package.json。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre>{
    "<span class="attribute">name</span>": <span class="value"><span class="string">"wine-cellar"</span></span>,
    "<span class="attribute">description</span>": <span class="value"><span class="string">"Wine Cellar Application"</span></span>,
    "<span class="attribute">version</span>": <span class="value"><span class="string">"0.0.1"</span></span>,
    "<span class="attribute">private</span>": <span class="value"><span class="literal">true</span></span>,
    "<span class="attribute">dependencies</span>": <span class="value">{
        "<span class="attribute">express</span>": <span class="value"><span class="string">"3.x"</span>
    }</span>
}</span>
</pre></td></tr></table></figure>

<p>接下来run command</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">npm</span> install
</pre></td></tr></table></figure>

<p>这样express就装上了。</p>
<p>我们实现几个简单的 get post 方法来做实验</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
</pre></td><td class="code"><pre>
var express = require(<span class="string">'express'</span>)
  , app = express();

<span class="transposed_variable">app.</span>use(<span class="transposed_variable">express.</span>bodyParser());

<span class="transposed_variable">app.</span>get(<span class="string">'/hello'</span>, <span class="keyword">function</span>(req, res) <span class="cell">{
    res.send("hello world");
}</span>);
 
<span class="transposed_variable">app.</span>get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(req, res)</span> {</span>
  setTimeout(<span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
    <span class="transposed_variable">res.</span>writeHead(<span class="number">200</span>, <span class="cell">{<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>}</span>);
    <span class="transposed_variable">res.</span><span class="keyword">end</span>();
  }, <span class="number">200</span>);
});

<span class="transposed_variable">app.</span>get(<span class="string">'/hi'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(req, res)</span> {</span>
  <span class="keyword">if</span> (<span class="transposed_variable">req.</span>param(<span class="string">'hello'</span>) !== undefined) <span class="cell">{
    res.writeHead(<span class="number">200</span>, {<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>}</span>);
    <span class="transposed_variable">res.</span><span class="keyword">end</span>(<span class="string">'Hello!'</span>);
  } <span class="keyword">else</span> <span class="cell">{
    res.writeHead(<span class="number">500</span>, {<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>}</span>);
    <span class="transposed_variable">res.</span><span class="keyword">end</span>(<span class="string">'use post instead'</span>);
  }
});

<span class="transposed_variable">app.</span>post(<span class="string">'/hi'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(req, res)</span> {</span>
  setTimeout(<span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
    <span class="transposed_variable">res.</span>writeHead(<span class="number">200</span>, <span class="cell">{<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>}</span>);
    <span class="transposed_variable">res.</span><span class="keyword">end</span>(<span class="transposed_variable">req.</span>param(<span class="string">'message'</span>) || <span class="string">'message'</span>);
  }, <span class="number">100</span>);
});


<span class="transposed_variable">app.</span>get(<span class="string">'/user'</span>, <span class="keyword">function</span>(req, res) <span class="cell">{
    res.send(
      [
        {name:<span class="string">'jack'</span>}</span>, 
        <span class="cell">{name:<span class="string">'tom'</span>}</span>
      ]
    );
});

<span class="transposed_variable">app.</span>get(<span class="string">'/user/:id'</span>, <span class="keyword">function</span>(req, res) <span class="cell">{
    res.send({
        id: <span class="number">1</span>, 
        name: "node js", 
        description: "I am node js"
    }</span>);
});

<span class="transposed_variable">app.</span>post(<span class="string">'/user/edit'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(req, res)</span> {</span>
  setTimeout(<span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
    <span class="transposed_variable">res.</span>send(<span class="cell">{
      id:req.param(<span class="string">'id'</span>),
      status:<span class="number">1</span>
    }</span>);
  }, <span class="number">100</span>);
});


 
<span class="transposed_variable">app.</span>listen(<span class="number">3000</span>);
<span class="transposed_variable">console.</span><span class="built_in">log</span>(<span class="string">'Listening on port 3000...'</span>);
</pre></td></tr></table></figure>

<h2>testosterone</h2>
<p>server 架设完毕，自然要开始做测试了。</p>
<p>这个 project 的接口的命名都挺优雅，直接上代码。</p>
<p>首先是测试基本的功能</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="title">var</span> testosterone = require('testosterone')({port: <span class="number">3000</span>})
  , assert = testosterone.assert;

<span class="title">testosterone</span>
  .get('/hello',function(res){
    assert.equal(res.statusCode, <span class="number">200</span>);
  })

  .get('/hi',function(res){
    assert.equal(res.statusCode, <span class="number">500</span>);
  })

  .post('/hi', {<span class="typedef"><span class="keyword">data</span>: <span class="container">{<span class="title">message</span>: '<span class="title">hola'</span>}</span>}, <span class="container">{
    <span class="title">status</span>: 200
    ,<span class="title">body</span>: '<span class="title">hola'</span>
  }</span>);</span>
</pre></td></tr></table></figure>

<p>然后针对上面模拟的user的get post 做简单的测试。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="code"><pre>var testosterone = <span class="built_in">require</span>(<span class="string">'testosterone'</span>)({port: <span class="number">3000</span>})
  , <span class="built_in">assert</span> = testosterone.<span class="built_in">assert</span>;

testosterone  
  .get(<span class="string">'/user'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(res)</span></span> {
    var expectRes = [
        {name:<span class="string">'jack'</span>}, 
        {name:<span class="string">'tom'</span>}
    ];

    <span class="built_in">assert</span>.equal(res.statusCode, <span class="number">200</span>);
    <span class="built_in">assert</span>.equal(JSON.stringify(JSON.parse(res.body)),JSON.stringify(expectRes));
  })

  .get(<span class="string">'/user/1'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(res)</span></span> {
    
    var user = JSON.parse(res.body);

    <span class="built_in">assert</span>.equal(res.statusCode, <span class="number">200</span>);
    <span class="built_in">assert</span>.equal(user.name, <span class="string">"node js"</span>);
    <span class="built_in">assert</span>.equal(user.description,<span class="string">"I am node js"</span>);
  })
</pre></td></tr></table></figure>

<p>接下来，如果你想要针对每个test case 用 <strong>give when then</strong> 来描述的话，可以这样：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
</pre></td><td class="code"><pre>var testosterone = require(<span class="string">'testosterone'</span>)(<span class="cell">{port: <span class="number">3000</span>, title: <span class="string">'test user api'</span>}</span>)
  , add = <span class="transposed_variable">testosterone.</span>add
  , assert = <span class="transposed_variable">testosterone.</span>assert;

testosterone
  .add(
    <span class="string">'GIVEN a user id  to /user/{id}  \n'</span> +
    <span class="string">'WHEN it have response user \n'</span> +
    <span class="string">'THEN it should return user json'</span>,

    <span class="function"><span class="keyword">function</span> <span class="params">(cb)</span> {</span>
      <span class="transposed_variable">testosterone.</span>get(<span class="string">'/user/1'</span>, cb(<span class="function"><span class="keyword">function</span> <span class="params">(res)</span> {</span>
        var expectRes = <span class="cell">{
            id: <span class="number">1</span>, 
            name: "node js", 
            description: "I am node js"
        }</span>;

        <span class="transposed_variable">assert.</span>equal(<span class="transposed_variable">res.</span>statusCode, <span class="number">200</span>);
        <span class="transposed_variable">assert.</span>equal(<span class="transposed_variable">JSON.</span>stringify(<span class="transposed_variable">JSON.</span>parse(<span class="transposed_variable">res.</span>body)), <span class="transposed_variable">JSON.</span>stringify(expectRes));
      }));
  })


  .add(
    <span class="string">'GIVEN a POST  a user info to /user/edit \n'</span> +
    <span class="string">'WHEN find modify success \n'</span> +
    <span class="string">'THEN it should resturn status 1'</span>,

    <span class="function"><span class="keyword">function</span> <span class="params">(cb)</span> {</span>
      <span class="transposed_variable">testosterone.</span>post(<span class="string">'/user/edit'</span>, <span class="cell">{data: {id: <span class="number">1</span>, name: "change name"}</span>}, cb(<span class="function"><span class="keyword">function</span> <span class="params">(res)</span> {</span>
        var res = <span class="transposed_variable">JSON.</span>parse(<span class="transposed_variable">res.</span>body);
        <span class="transposed_variable">assert.</span>equal(<span class="transposed_variable">res.</span>status, <span class="number">1</span>);
      }));
    }
  ) 

  .run(<span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
    require(<span class="string">'sys'</span>).print(<span class="string">'done!'</span>);
  });
</pre></td></tr></table></figure>

<h2>Conclusion</h2>
<p>通过以上的代码，可以看出，同java 冗长的 http 头设置等，testosterone确实简单和优雅了不少。</p>
<p>testosterone 是个蛮不错的项目，作者写的文档简单易懂，在 test 文件夹里面也有很多测试代码。</p>
<p>本篇 blog 的 sample code 的放在 <a href="https://github.com/nateriver520/function-test-demo" target="_blank"><a href="https://github.com/nateriver520/function-test-demo">https://github.com/nateriver520/function-test-demo</a></a></p>
]]></content>
    <category scheme="nateriver520.github.io/tags/nodejs/" term="nodejs"/>
    <category scheme="nateriver520.github.io/tags/testosterone/" term="testosterone"/>
    <category scheme="nateriver520.github.io/tags/express/" term="express"/>
    <category scheme="nateriver520.github.io/tags/test/" term="test"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Build A Micro Team]]></title>
    <link href="nateriver520.github.io/2013/10/18/building-a-micro-team/"/>
    <id>nateriver520.github.io/2013/10/18/building-a-micro-team/</id>
    <published>2013-10-18T13:03:39.000Z</published>
    <updated>2013-11-03T04:05:18.000Z</updated>
    <content type="html"><![CDATA[<p>最近这两周一直在忙，忙到忘记回QQ和微信的程度，甚至有两天下班回来直接躺平，虽说忙碌但是也收获了不少。</p>
<h2>Start</h2>
<p>说起来有趣，最近在忙的这个项目最初是公司设立的用于工程师在业余时间开发的project，正式参与这个项目时正好是自己所在team的空闲期，并且对他们的team在tech talk介绍过的项目很感兴趣，就联系了他们team的leader，利用下班时间帮他们写项目。</p>
<h2>Change</h2>
<p>最初项目不紧不慢的进行，自己主要集中在业务逻辑方面，前期项目大部分code都是我在维护，直到高层越来越重视，于是项目的进度开始加快，并成立了一个Scrum Team来驱动项目。</p>
<p>同时我的manager也让我投入更多的时间在这个项目，因此我有大约70%的时间focus在这个项目，由于这是一个新的scrum team，大家之前都没有带领团队经验，所以我们一切从零开始。</p>
<a id="more"></a>

<h2>Scrum</h2>
<p>对于新的scrum team, 在我的强烈建议下，我们开始用trello管理tasks，并设定每两周一次的sprint planing。</p>
<p>但是scrum了两天后，我们发现在project的初期，往往变化非常快，所以每两周的sprint planing根本更不上变化，因此我们决定在每天下午的scrum meeting上，我们会加入一些新的task，并且按照项目的最新进展来重新的分配task。</p>
<blockquote>
<p>Project初期，Scrum能够提高团队的工作效率和进度，但是对于具体的操作，团队应当按照项目状况来灵活调节。</p>
</blockquote>
<p>而对于daily stand up，团队的成员大多都以简明扼要的方式陈述项目进展和出现的问题，以期最大程度的节省时间。所以每天team 5个成员的update再加上task的re-assign大约20min就能结束。</p>
<h2>Milestone</h2>
<p>由于这次项目是自己从初期就参与进来，并到项目的第一次release。</p>
<p>是自己看着项目从一个不成熟的project，到有了自己的CI，Tasks，Api，甚至有了dashboard和简单的monitor。</p>
<p>所以当自己在项目第一次向外push data的时候觉得无比的骄傲，那种感觉可以用我们老大的一句话来形容恰巧不过。</p>
<blockquote>
<p>It is like a new baby born by you.   :)</p>
</blockquote>
<h2>Keep Learning and Keep Gaining</h2>
<blockquote>
<p>你永远不知道你现在做的，以后会对你产生很大的影响。</p>
</blockquote>
<p>这是我这次project的另外一个收获。</p>
<p>随着项目的深入，我在项目的基础上渐渐的有了一个idea。并我在项目release的这天，我利用早上2小时完成了我第一个专利的demo，在项目release前的两小时，向公司内部的系统提交了专利申请。</p>
<p>可以说没有这次项目的参与，自己也很难有这样的idea，更别论到最后专利的提交，</p>
<p>因此无论最后专利申请是否通过，对自己来说都是不小的收获。</p>
<h2>Conclusion</h2>
<p>无论如何，这次Scrum经历是个非常难得的经历，自己收获颇丰。</p>
<p>在此感谢下我的team member :) 感谢大家的hard work。</p>
]]></content>
    <category scheme="nateriver520.github.io/tags/Scrum/" term="Scrum"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Memcached 使用与简单监测]]></title>
    <link href="nateriver520.github.io/2013/10/13/memcached-使用与简单检测/"/>
    <id>nateriver520.github.io/2013/10/13/memcached-使用与简单检测/</id>
    <published>2013-10-13T06:35:18.000Z</published>
    <updated>2013-10-28T03:46:45.000Z</updated>
    <content type="html"><![CDATA[<h2>Introduce</h2>
<p><a href="http://memcached.org/" target="_blank">Memcached</a>作为一个高并发内存Cached系统被很多大公司使用，最近也一直在用Memcached做项目也积累了一些相关经验。</p>
<p>本篇博文主要记录Memcached的一些基本使用和简单的Monitor</p>
<h2>Install</h2>
<p>Memcached的安装很简单，在Ubuntu下面一行命令搞定。</p>
<figure class="highlight lang-Shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>su<span class="operator"><span class="keyword">do</span> apt-<span class="keyword">get</span> install memcached
</pre></td></tr></table></figure>

<a id="more"></a>

<h2>Start</h2>
<p>实际使用的时候，memcached需要调整内存大小和端口号等命令，则启动的使用时用以下的Command就行。</p>
<figure class="highlight lang-Shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="comment">/usr/local/bin/memcached</span> <span class="literal">-</span><span class="comment">p</span> <span class="comment">11211</span> <span class="literal">-</span><span class="comment">m</span> <span class="comment">64m</span> <span class="literal">-</span><span class="comment">d
</pre></td></tr></table></figure>

<ul>
<li>-p 指定端口号</li>
<li>-m 指定内存大小</li>
<li>-d 作为daemon在后台启动</li>
<li>如果想trouble shotting 则加 -vv</li>
</ul>
<h2>Test</h2>
<p>Test也很简单，安装官网的命令就行</p>
<figure class="highlight lang-Shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">telnet</span> localhost <span class="number">11211</span>
</pre></td></tr></table></figure>

<p>里面就能Get和Set了。</p>
<h2>Use in Java</h2>
<p>由于项目是java的，所以以java为例子来介绍Java下Memcached的使用。</p>
<p>Java下Memcached的客户端很多，这里介绍spymemcached</p>
<p>spymemcached的使用很简单，在maven项目下面，我们加入如下依赖。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">dependency</span>&gt;</span>
    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>net.spy<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spymemcached<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
    <span class="tag">&lt;<span class="title">version</span>&gt;</span>2.9.1<span class="tag">&lt;/<span class="title">version</span>&gt;</span>
<span class="tag">&lt;/<span class="title">dependency</span>&gt;</span>
</pre></td></tr></table></figure>

<p>这样我们就能对Memcached操作了。</p>
<figure class="highlight lang-Java"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="code"><pre>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Memcached</span> {</span>

    <span class="keyword">private</span> <span class="keyword">static</span> MemcachedClient MEMCACHED_CLIENT;

    <span class="keyword">static</span> {
        <span class="keyword">try</span> {
            MEMCACHED_CLIENT = <span class="keyword">new</span> MemcachedClient(
                    AddrUtil.getAddresses(<span class="string">"localhost1:11211 localhost2:11211"</span>));
        } <span class="keyword">catch</span> (Exception e) {
            System.err.println(<span class="string">"Cannot init MEMCACHED Memcached Client"</span>);
        }
    }

    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> set(String key, String value，Integer expireTime ) <span class="keyword">throws</span> Exception {
        MEMCACHED_CLIENT.set(key, expireTime, value);
    }

    <span class="keyword">public</span> <span class="keyword">static</span> String get(String key) <span class="keyword">throws</span> Exception {
        Object value = MEMCACHED_CLIENT.get(key);
        <span class="keyword">if</span> (<span class="keyword">null</span> != value)
            <span class="keyword">return</span> value.toString();
        <span class="keyword">return</span> <span class="keyword">null</span>;
    }

}
</pre></td></tr></table></figure>

<h2>Monitor</h2>
<p>我们可以通过以下简单的命令得知Memcached的运行状况,以此为扩充可以实现简单的Memcached检测shell。</p>
<figure class="highlight lang-Shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>  <span class="title">watch</span> <span class="string">"echo stats | nc 127.0.0.1 11211"</span>
</pre></td></tr></table></figure>

<h2>Conclusion</h2>
<p>Memcached实际使用下来简单易用，各个平台上面也有相应的Client.</p>
<p>但有时高并发可能会出现Timeout的情况，导致缓冲没办法命中的情况，具体原因还需要进一步调查。</p>
<p>Memcahed的作者最近用Go语言去写了<a href="https://github.com/golang/groupcache" target="_blank">groupcache</a>很值得关注。</p>
]]></content>
    <category scheme="nateriver520.github.io/tags/Memcached/" term="Memcached"/>
    <category scheme="nateriver520.github.io/tags/Java/" term="Java"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[New Start]]></title>
    <link href="nateriver520.github.io/2013/10/13/new-start/"/>
    <id>nateriver520.github.io/2013/10/13/new-start/</id>
    <published>2013-10-12T17:19:09.000Z</published>
    <updated>2013-10-19T08:51:48.000Z</updated>
    <content type="html"><![CDATA[<p>一直以来自己都没有记录的习惯，平常最多在evernote上记录些重要的信息。</p>
<p>后来读了一篇blog说整理知识的重要性才恍然大悟，一直以来自己都是试图让一门技术快速上手，而记录的很少，等时间一久，很多用过的东西就忘记了。</p>
<p>比如之前在EMC实习时写过很长时间的python，现在也忘记的七七八八。再加上自己在新的公司入职快6个月，各种新的信息铺面而来，更需要整理和提炼。</p>
<p>So 自己做了以下几个方面试图补救以前不爱记录，不爱整理的坏习惯。</p>
<ul>
<li>整理自己的evernote笔记 (70%)</li>
<li>建立自己code snippet  (100%)</li>
<li>在github上建立自己算法练习project (100%)</li>
</ul>
<a id="more"></a>

<p>接下来的目标是：</p>
<ul>
<li>每周整理一次自己的笔记心得</li>
<li>每个月出一篇blog</li>
<li>每周写算法</li>
</ul>
]]></content>
    <category scheme="nateriver520.github.io/tags/life/" term="life"/>
  </entry>
</feed>
