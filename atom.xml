<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Nateriver's Blog]]></title>
  <subtitle><![CDATA[Learning and Thinking]]></subtitle>
  <link href="nateriver520.github.io/atom.xml" rel="self"/>
  <link href="nateriver520.github.io"/>
  <updated>2014-02-26T13:46:16.788Z</updated>
  <id>nateriver520.github.io/</id>
  <author>
    <name><![CDATA[Shuo Yang]]></name>
    <email><![CDATA[shuo.yang@yahoo.com]]></email>
  </author>
  <generator uri="http://zespia.tw/hexo">Hexo</generator>
  <entry>
    <title type="html"><![CDATA[用Virtual Box搭建集群环境]]></title>
    <link href="nateriver520.github.io/2014/02/26/用virtual-box搭建集群环境/"/>
    <id>nateriver520.github.io/2014/02/26/用virtual-box搭建集群环境/</id>
    <published>2014-02-26T13:18:11.000Z</published>
    <updated>2014-02-26T13:46:06.000Z</updated>
    <content type="html"><![CDATA[<h2 id="-">引言</h2>
<p>前段时间一直在实验各种大数据查询和存储工具，由于公司的机器是特别定制的，搭环境不是很方便，而且不能随时上去玩，所以就考虑用Virtual Box搭建集群的方式测试各种工具。</p>
<h2 id="-">环境</h2>
<p>这里选用了 Cen OS 6.3 min 是为了和公司的环境保持一至，并且min版本没有图形界面，节省资源。</p>
<ul>
<li>Virtual Box 4.3.6</li>
<li>Cent OS 6.3</li>
<li>image CentOS-6.3-x86_64-minimal.iso </li>
</ul>
<h2 id="-">创建虚拟机</h2>
<a id="more"></a>

<p><img src="http://webees.me/wp-content/uploads/2013/11/create-new-vm.png" alt="创建虚拟机"></p>
<p><img src="http://webees.me/wp-content/uploads/2013/11/select-64bit.png" alt="选择64位"></p>
<p>在mac上需要先创建 hostonly adapter
<img src="http://webees.me/wp-content/uploads/2013/11/create-hostonly-adapter.png" alt="创建适配器"></p>
<p>创建完成后添加第二块网卡</p>
<p><img src="http://webees.me/wp-content/uploads/2013/11/attach-hostonly-adapter.png" alt="网卡配置"></p>
<p>接下来就可以在虚拟机中载入镜像安装了</p>
<p><img src="http://webees.me/wp-content/uploads/2013/11/select-iso-image.png" alt="选择镜像"></p>
<h2 id="install-centos">Install CentOS</h2>
<p>安装Cent OS 选项如下</p>
<ul>
<li>media test -&gt; skip</li>
<li>choose language -&gt; yours</li>
<li>type of keyboard -&gt; yours</li>
<li>Installation method -&gt; URL</li>
<li>Root password -&gt; yours</li>
<li>Partitioning Type -&gt; Use entire drive</li>
<li>Partitioning Type -&gt; Use entire drive</li>
<li>Writing storage configuration to disk -&gt; Write changes to disk</li>
</ul>
<h2 id="-">配置网络</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>vi /etc/sysconfig/network<span class="attribute">-scripts</span>/ifcfg<span class="attribute">-eth1</span>
</pre></td></tr></table></figure>

<p>/etc/sysconfig/network-scripts/ifcfg-eth1</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="constant">DEVICE</span>=eth1
<span class="constant">HWADDR</span>=xx:xx:xx:xx:xx:xx # Don't change
<span class="constant">TYPE</span>=Ethernet
<span class="constant">UUID</span>=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx # Don't change
<span class="constant">ONBOOT</span>=yes # no -&gt; yes
<span class="constant">NM_CONTROLLED</span>=no # yes -&gt; no
<span class="constant">BOOTPROTO</span>=none # dhcp -&gt; none
<span class="comment"># add bellow </span>
<span class="constant">IPADDR</span>=192.168.56.10
<span class="constant">NETMASK</span>=255.255.255.0
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>vi /etc/sysconfig/network<span class="attribute">-scripts</span>/ifcfg<span class="attribute">-eth0</span>
</pre></td></tr></table></figure>

<p>/etc/sysconfig/network-scripts/ifcfg-eth0</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="setting">DEVICE=<span class="value"><span class="string">"eth0"</span></span></span>
<span class="setting">BOOTPROTO=<span class="value"><span class="string">"dhcp"</span></span></span>
<span class="setting">HWADDR=<span class="value"><span class="string">"xx:xx:xx:xx:xx:xx"</span></span></span>
<span class="setting">NM_CONTROLLED=<span class="value"><span class="string">"yes"</span></span></span>
<span class="setting">ONBOOT=<span class="value"><span class="string">"yes"</span> # <span class="keyword">no</span> -&gt; <span class="keyword">yes</span></span></span>
<span class="setting">TYPE=<span class="value"><span class="string">"Ethernet"</span></span></span>
<span class="setting">UUID=<span class="value"><span class="string">"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"</span> # Don't change</span></span>
</pre></td></tr></table></figure>

<p>配置完成后重启就行了</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>service network restart
</pre></td></tr></table></figure>

<p>测试一下，看mac是否能ping通虚拟机，同时虚拟机能上网。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="built_in">ping</span> <span class="number">192.168</span><span class="number">.56</span><span class="number">.10</span>    <span class="preprocessor"># In mac Terminal</span>
<span class="built_in">Ping</span> www<span class="preprocessor">.google</span><span class="preprocessor">.com</span>   <span class="preprocessor"># In cent os</span>
</pre></td></tr></table></figure>

<h2 id="-">软件配置</h2>
<p>更新软件和安装一些常用的软件</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>yum update
yum groupinstall Base
yum groupinstall <span class="string">"Development Tools"</span>
yum install denyhosts rdate <span class="built_in">sudo</span> wget man mlocate
</pre></td></tr></table></figure>

<p>创建新用户</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>useradd yourname
passwd  yourname
</pre></td></tr></table></figure>

<p>把新用户加到sudo list, 这样你就能运行sudo命令啦</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre> vi /etc/sudoers
</pre></td></tr></table></figure>

<p>/etc/sudoers</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>## Allow root <span class="keyword">to</span> run any commands anywhere
root    <span class="keyword">ALL</span>=(<span class="keyword">ALL</span>)       <span class="keyword">ALL</span>
yourname <span class="keyword">ALL</span>=(<span class="keyword">ALL</span>)       <span class="keyword">ALL</span>  # add this
</pre></td></tr></table></figure>

<p>搭建集群自然别忘记关闭防火墙。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>vi /etc/selinux/config
</pre></td></tr></table></figure>

<p>/etc/selinux/config</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>SELINUX=disabled <span class="comment"># enforcing -&gt; disabled</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>chkconfig iptables <span class="keyword">off</span> 
service iptables <span class="keyword">stop</span>
</pre></td></tr></table></figure>

<h3 id="-java-">安装JAVA环境</h3>
<ul>
<li>下载 jdk-7-linux-x64.rpm</li>
<li>安装 jdk</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>rpm <span class="attribute">-ivh</span> jdk<span class="subst">-</span><span class="number">7</span><span class="attribute">-linux</span><span class="attribute">-x64</span><span class="built_in">.</span>rpm <span class="variable">#jdk</span> will be install /usr/java
</pre></td></tr></table></figure>

<ul>
<li>添加环境变量</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>vi /etc/profile
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>JAVA_HOME=/usr/java/jdk1.<span class="number">7.0</span>
JRE_HOME=/usr/java/jdk1.<span class="number">7.0</span>/jre
PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$JRE_HOME</span>/bin
CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar:<span class="variable">$JRE_HOME</span>/lib
<span class="keyword">export</span> JAVA_HOME JRE_HOME PATH CLASSPATH
</pre></td></tr></table></figure>

<h3 id="-maven">安装 Maven</h3>
<figure class="highlight shell"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>wget http:<span class="comment">//www.webhostingjams.com/mirror/apache/maven/maven-3/3.1.1/binaries/apache-maven-3.1.1-bin.tar.gz </span>
tar <span class="attribute">-xzvf</span> apache<span class="attribute">-maven</span><span class="subst">-</span><span class="number">3.1</span><span class="number">.1</span><span class="attribute">-bin</span><span class="built_in">.</span>tar<span class="built_in">.</span>gz 
ln <span class="attribute">-s</span> apache<span class="attribute">-maven</span><span class="subst">-</span><span class="number">3.1</span><span class="number">.1</span> maven 
export PATH<span class="subst">=</span><span class="variable">$HOME</span>/maven/bin:<span class="variable">$PATH</span>
</pre></td></tr></table></figure>

<h3 id="-">同时别忘记免密码登陆</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>ssh-keygen -t rsa
scp ~<span class="regexp">/.ssh/id</span>_rsa.pub <span class="number">192.168</span>.<span class="number">56.10</span><span class="symbol">:/home/yourname/</span>.ssh/authorized_keys
</pre></td></tr></table></figure>

<h2 id="-">克隆虚拟机</h2>
<p>一台搭建完成后，剩下的就好办啦。</p>
<p>右键 clone 机器，剩下唯一要做的就是修改内网ip地址就好了。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>vi /etc/sysconfig/network<span class="attribute">-scripts</span>/ifcfg<span class="attribute">-eth1</span>
</pre></td></tr></table></figure>

<ul>
<li>修改hostname</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>vi /etc/sysconfig/network
</pre></td></tr></table></figure>

<ul>
<li>重启network</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>start_udev
service network restart
</pre></td></tr></table></figure>

<p>集群这样就搭建完成啦。整个过程真累，尤其是网卡这块折腾了半天。</p>
]]></content>
    <category scheme="nateriver520.github.io/tags/Hadoop/" term="Hadoop"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[两道算法]]></title>
    <link href="nateriver520.github.io/2014/01/08/两道算法/"/>
    <id>nateriver520.github.io/2014/01/08/两道算法/</id>
    <published>2014-01-08T01:32:47.000Z</published>
    <updated>2014-01-08T01:59:56.000Z</updated>
    <content type="html"><![CDATA[<p>好久没写算法了，突然一写发现有些生疏了。比如这两道算法题一眼看起来很简单，但是实际写起来却很麻烦。</p>
<h2 id="-">矩阵全排列问题</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>给定一个矩阵，从每一行里面选出一个数字，输出该矩阵的全排列
       |<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>|
比如   |<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>| 输出  <span class="list">{1,2,4}</span>,<span class="list">{1,2,7}</span>,<span class="list">{1,2,8}</span>,<span class="list">{1,3,4}</span>,<span class="list">{1,3,7}</span>,<span class="list">{1,3,8}</span> ........
       |<span class="number">4</span>,<span class="number">7</span>,<span class="number">8</span>|
</pre></td></tr></table></figure>

<p>这道题猛一看很简单，直接循环搞定，但是实际上需要通过递归来处理问题, 而递归的关键点则是: <strong><em>每次扫到最后一行的元素时，输出临时结果</em></strong>。</p>
<a id="more"></a>


<figure class="highlight java"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
</pre></td><td class="code"><pre>    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMatrix</span>(<span class="keyword">int</span>[][]matrix, <span class="keyword">int</span> start, HashMap&lt;Integer,Integer&gt;tempResult){

        <span class="comment">//when reach the last row, we should print temp result</span>
        <span class="keyword">if</span>(matrix.length == start){
            printResult(tempResult);
            <span class="keyword">return</span>;
        }

        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; matrix[start].length;i++){
            tempResult.put(start,matrix[start][i]);
            printMatrix(matrix, start + <span class="number">1</span>, tempResult);
        }
    }

    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printResult</span>(HashMap&lt;Integer,Integer&gt; result){
        StringBuilder temp = <span class="keyword">new</span> StringBuilder();
        <span class="keyword">for</span>(Integer key : result.keySet()){
            temp.append(result.get(key)).append(<span class="string">" "</span>);
        }
        System.out.println(temp.toString());

    }

    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMatrix</span>(<span class="keyword">int</span>[][]matrix){
         HashMap&lt;Integer,Integer&gt; tempResult = <span class="keyword">new</span> LinkedHashMap&lt;Integer, Integer&gt;();
         printMatrix(matrix,<span class="number">0</span>,tempResult);
    }

    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) {
        <span class="keyword">int</span> testcase1[][] = {
                {<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>},
                {<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>},
                {<span class="number">9</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">12</span>},
                {<span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">0</span>}
        };

        printMatrix(testcase1);

        <span class="keyword">int</span> testcase2[][] = {
                {<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>},
                {<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>},
                {<span class="number">9</span>, <span class="number">0</span>, <span class="number">11</span>, <span class="number">12</span>},
                {<span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">0</span>}
        };

        printMatrix(testcase2);

        <span class="keyword">int</span> testcase3[][] = {
        };

        printMatrix(testcase3);

        <span class="keyword">int</span> testcase4[][] = {
            {<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>}
        };

        printMatrix(testcase4);

    }
</pre></td></tr></table></figure>

<h2 id="-">多边形周长求等分点问题</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>给定一个多边形，求多边形周长的 n 等分点。
</pre></td></tr></table></figure>

<p>这题目的解题思路也很直观，</p>
<p><strong><em> 先求多边形周长，确定等分点长度，然后顺序扫描每一条边，如果边长度 &gt; 等分点长度，那么在该边上选取等分点，如果不够，则在下一条边上选取等分点。</em></strong></p>
<p>但是实际写起来就很麻烦了，比如求等分点需要 计算圆和直线的交点，直接导致我重新推导一遍公式。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
</pre></td><td class="code"><pre>    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Point&gt; <span class="title">split</span>(List&lt;Point&gt; points, <span class="keyword">int</span> n){
        <span class="keyword">double</span> oneDistance = getPerimeter(points) /n;
        List&lt;Point&gt; res = <span class="keyword">new</span> LinkedList&lt;Point&gt;();

        <span class="keyword">double</span> target = oneDistance;
        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; points.size(); i++){
            Point cur = points.get(i);
            Point next = i+<span class="number">1</span> &gt;= points.size() ? points.get(<span class="number">0</span>) : points.get(i+<span class="number">1</span>);

            Point p = getPointBetweenPointAB(cur,next,target);

            <span class="keyword">while</span> (p != <span class="keyword">null</span>){
               target = oneDistance;
               res.add(p);
               cur = p;
               p = getPointBetweenPointAB(p,next,target);
            }

            target = oneDistance - getTwoPointDistance(cur,next);
        }

        <span class="keyword">return</span> res;
    }

    <span class="keyword">private</span> <span class="keyword">static</span> Point <span class="title">getPointBetweenPointAB</span>(Point a, Point b, <span class="keyword">double</span> distance){
        <span class="keyword">double</span> abDistance = getTwoPointDistance(a,b);
        <span class="keyword">if</span>(abDistance &lt; distance)
            <span class="keyword">return</span> <span class="keyword">null</span>;
        <span class="keyword">else</span>{
            <span class="keyword">double</span> slope = getSlope(a,b);
            <span class="keyword">if</span>(slope == Double.NEGATIVE_INFINITY){
                <span class="keyword">return</span> <span class="keyword">new</span> Point(a.x, a.y + distance) ;
            }
            <span class="keyword">double</span> base = Math.sqrt(Math.pow(distance,<span class="number">2</span>)/(Math.pow(slope,<span class="number">2</span>)+<span class="number">1</span>));

            base = slope &gt;= <span class="number">0</span> ? - base : base;

            <span class="keyword">return</span> <span class="keyword">new</span> Point(a.x + base,a.y + base*slope);
        }
    }

    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">getSlope</span>(Point a, Point b){
        <span class="keyword">return</span> (a.y -b.y)/(a.x - b.x);
    }

    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">getPerimeter</span>(List&lt;Point&gt; points){
        <span class="keyword">double</span> res = <span class="number">0.0</span>;
        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; points.size();i++){
            <span class="keyword">int</span> next = i + <span class="number">1</span> ;
            <span class="keyword">if</span>(next == points.size())
                next = <span class="number">0</span>;
            res += getTwoPointDistance(points.get(i),points.get(next));
        }

        <span class="keyword">return</span> res;
    }

    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">getTwoPointDistance</span>(Point a, Point b){
        <span class="keyword">return</span> Math.sqrt(Math.pow(a.x- b.x,<span class="number">2</span>) + Math.pow(a.y- b.y,<span class="number">2</span>));
    }

    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) {
        List&lt;Point&gt; points = <span class="keyword">new</span> LinkedList&lt;Point&gt;();
        points.add(<span class="keyword">new</span> Point(<span class="number">0.0</span>,<span class="number">0.0</span>));
        points.add(<span class="keyword">new</span> Point(<span class="number">0.0</span>,<span class="number">3.0</span>));
        points.add(<span class="keyword">new</span> Point(<span class="number">4.0</span>,<span class="number">0.0</span>));

        List&lt;Point&gt; splitPoints = split(points,<span class="number">5</span>);

        <span class="keyword">for</span>(Point p : splitPoints){
            p.print();
        }
    }
</pre></td></tr></table></figure>

<h2 id="-">结论</h2>
<p>自己算法太弱了，需要苦练一下 T_T</p>
]]></content>
    <category scheme="nateriver520.github.io/tags/algorithm/" term="algorithm"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[2013 To 2014]]></title>
    <link href="nateriver520.github.io/2014/01/04/2013-=-2014/"/>
    <id>nateriver520.github.io/2014/01/04/2013-=-2014/</id>
    <published>2014-01-04T03:28:25.000Z</published>
    <updated>2014-01-04T04:44:48.000Z</updated>
    <content type="html"><![CDATA[<p>最近拖延症又犯了，本来打算写个年度总结的，结果一直拖到今天。</p>
<p>总体来说，今年算是收获颇多，变化很大的一年.</p>
<h2 id="-">地理位置</h2>
<p>今年3月份的时候从生活了快7年的上海 迁移到了北京，在 Yahoo! 开始了一段新的旅程。
<a id="more"></a>
<img src="http://ww4.sinaimg.cn/large/7ed77ab1jw1ec7em856glj20qs0o40xq.jpg" alt=""></p>
<h2 id="-">工作</h2>
<p>不知不觉在 Yahoo! 工作 8 个月了，来到 Yahoo! 后一切从头开始，以前熟悉或者习惯的技术在新的职位上全部都得从头学起。</p>
<p>总体来说今年在Java，Hadoop 还有 团队协作上面有了很大的进展，在年终的时候大概列了下，自己直接参与了7-8个或大或小的项目，其中有一个项目直接产生了revenue，另外一个nlp的项目则帮助了很多人。</p>
<p>在Yahoo!连续参加了三次Hack Day, 虽然都没有获奖，但是和小伙伴一起熬夜写代码，录视频也很开心。</p>
<h2 id="-">业余项目</h2>
<p>今年最让我觉得骄傲的是，我的 <a href="http://nateriver520.github.io/tipit/" target="_blank">Tip.It</a> 正式上线了，同时也开源了 <a href="https://github.com/nateriver520/gogo-cache" target="_blank">gogo-cache</a></p>
<ul>
<li><a href="http://nateriver520.github.io/2013/12/06/tipit%E8%AF%9E%E7%94%9F%E8%AE%B0/" target="_blank">tipit诞生记</a></li>
<li><a href="https://github.com/nateriver520/gogo-cache" target="_blank">gogo-cache</a></li>
</ul>
<h2 id="2014">2014</h2>
<p>哈哈 总于到这个展望环节啦。</p>
<ul>
<li>深入学习 Go 和 Java</li>
<li>为开源社区多做贡献</li>
<li>在Machine Learning上面深入学习</li>
<li>多写Blog 多交流</li>
</ul>
]]></content>
    <category scheme="nateriver520.github.io/tags/life/" term="life"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Go Cron 相关项目源码阅读]]></title>
    <link href="nateriver520.github.io/2013/12/24/go-cron-相关项目源码阅读/"/>
    <id>nateriver520.github.io/2013/12/24/go-cron-相关项目源码阅读/</id>
    <published>2013-12-24T15:40:38.000Z</published>
    <updated>2013-12-24T15:45:44.000Z</updated>
    <content type="html"><![CDATA[<h2 id="-">介绍</h2>
<p>这段时间一直想把之前写的 monitor 用 go 重写一遍，由于自己是 go 的初学者， 自然要参考一些 go 的项目的 source code 来深入学习 go。</p>
<p>Monitor 项目中 cron 占了很大的比重， 所以本次代码阅读主要集中在 github 上两个 Star 数比较多的项目上。</p>
<ul>
<li><a href="https://github.com/rk/go-cron" target="_blank">rk/go-cron</a></li>
<li><a href="https://github.com/robfig/cron" target="_blank">robfig/cron</a></li>
</ul>
<h2 id="rk-go-cron">rk/go-cron</h2>
<p>这个项目比较小巧，整个项目不到100行代码，简单浏览了下很简单。</p>
<a id="more"></a>

<p>首先项目定义了job的数据结构</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="keyword">type</span> job <span class="keyword">struct</span> {
  Month, Day, Weekday  <span class="typename">int8</span>
  Hour, Minute, Second <span class="typename">int8</span>
  Task                 <span class="keyword">func</span>(time.Time)
}
</pre></td></tr></table></figure>

<p>然后通过这个函数来调度</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre><span class="keyword">func</span> processJobs() {
  <span class="keyword">for</span> {
    now := time.Now()
    <span class="keyword">for</span> _, j := <span class="keyword">range</span> jobs {
      <span class="comment">// execute all our cron tasks asynchronously</span>
      <span class="keyword">if</span> j.Matches(now) { <span class="comment">//Matches 用来判断当前job是否运行</span>
        <span class="keyword">go</span> j.Task(now) 
      }
    }
    time.Sleep(time.Second)
  }
}
</pre></td></tr></table></figure>

<p>项目灰常简单，可惜作者自己定义了一套 cron 的语法。</p>
<h2 id="robfig-cron">robfig/cron</h2>
<p>这个项目就显得专业很多,从 test 到注释，再到文档都很全。</p>
<p>我们还是从项目的数据结构入手，以下是cron项目定义数据结构的关系</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre>-<span class="ruby"> cron
</span>  -<span class="ruby"> entries  []*<span class="constant">Entry</span>
</span>    -<span class="ruby"> <span class="constant">Schedule</span> (interface)
</span>      -<span class="ruby"> <span class="constant">Next</span>(time.<span class="constant">Time</span>) time.<span class="constant">Time</span>  <span class="comment"># 返回给定时间之后的最近job启动时间  </span>
</span>    -<span class="ruby"> <span class="constant">Next</span> (time.<span class="constant">Time</span>) <span class="comment">#下次运行时间</span>
</span>    -<span class="ruby"> <span class="constant">Prev</span> (time.<span class="constant">Time</span>) <span class="comment">#上次运行时间</span>
</span>    -<span class="ruby"> <span class="constant">Job</span> (interface)
</span>      -<span class="ruby"> <span class="constant">Run</span>() 
</span>  -<span class="ruby"> stop     chan struct{}
</span>  -<span class="ruby"> add      chan *<span class="constant">Entry</span>
</span>  -<span class="ruby"> snapshot chan []*<span class="constant">Entry</span> 
</span>  -<span class="ruby"> running  bool</span>
</pre></td></tr></table></figure>

<p>然后我们从项目的 sample code 入手。</p>
<p>Demo code</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
</pre></td><td class="code"><pre>c := cron.New()
c.AddFunc(<span class="string">"0 5 * * * *"</span>,  <span class="keyword">func</span>() { fmt.Println(<span class="string">"Every 5 minutes"</span>) })
c.AddFunc(<span class="string">"@hourly"</span>,      <span class="keyword">func</span>() { fmt.Println(<span class="string">"Every hour"</span>) })
c.AddFunc(<span class="string">"@every 1h30m"</span>, <span class="keyword">func</span>() { fmt.Println(<span class="string">"Every hour thirty"</span>) })
c.Start()
..
<span class="comment">// Funcs are invoked in their own goroutine, asynchronously.</span>
...
<span class="comment">// Funcs may also be added to a running Cron</span>
c.AddFunc(<span class="string">"@daily"</span>, <span class="keyword">func</span>() { fmt.Println(<span class="string">"Every day"</span>) })
..
<span class="comment">// Inspect the cron job entries' next and previous run times.</span>
inspect(c.Entries())
..
c.Stop()  <span class="comment">// Stop the scheduler (does not stop any jobs already running).</span>
</pre></td></tr></table></figure>

<p>首先是 new 函数 很简单就是初始化一下， 返回cron的指针</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre><span class="comment">// New returns a new Cron job runner.</span>
<span class="keyword">func</span> New() *Cron {
  <span class="keyword">return</span> &Cron{
    entries:  <span class="constant">nil</span>,
    add:      <span class="built_in">make</span>(<span class="keyword">chan</span> *Entry),
    stop:     <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>{}),
    snapshot: <span class="built_in">make</span>(<span class="keyword">chan</span> []*Entry),
    running:  <span class="constant">false</span>,
  }
}
</pre></td></tr></table></figure>

<p>接下来是 <strong><em>AddFunc</em></strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
</pre></td><td class="code"><pre>// AddFunc adds <span class="operator">a</span> func <span class="built_in">to</span> <span class="operator">the</span> Cron <span class="built_in">to</span> be run <span class="command"><span class="keyword">on</span> <span class="title">the</span> <span class="title">given</span> <span class="title">schedule</span>.</span>
func (c *Cron) AddFunc(spec <span class="keyword">string</span>, cmd func()) error {
  <span class="constant">return</span> c.AddJob(spec, FuncJob(cmd))
}
<span class="comment">
// AddFunc adds a Job to the Cron to be run on the given schedule.</span>
func (c *Cron) AddJob(spec <span class="keyword">string</span>, cmd Job) error {
  schedule, err := Parse(spec)<span class="comment"> //格式cron的字符，这个项目还做了下扩展，支持@hourly的形式</span>
  <span class="keyword">if</span> err != nil {
    <span class="constant">return</span> err
  }
  c.Schedule(schedule, cmd)<span class="comment"> //把schedule 加入到 cron 的 entries 中</span>
  <span class="constant">return</span> nil
}
</pre></td></tr></table></figure>

<p>最后是 <strong><em>Start</em></strong></p>
<p>这个项目关键点就是用 <strong><em>channel</em></strong> 来驱动各项事件，比如结束，开始，运行等等。</p>
<p>这样使得代码的结构清晰，方便阅读。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
</pre></td><td class="code"><pre><span class="comment">// Start the cron scheduler in its own go-routine.</span>
<span class="keyword">func</span> (c *Cron) Start() {
  c.running = <span class="constant">true</span>
  <span class="keyword">go</span> c.run()
}

<span class="comment">// Run the scheduler.. this is private just due to the need to synchronize</span>
<span class="comment">// access to the 'running' state variable.</span>
<span class="keyword">func</span> (c *Cron) run() {
  <span class="comment">// Figure out the next activation times for each entry.</span>
  now := time.Now().Local()
  
  <span class="comment">//遍历 entries 获取每个entry的下次运行时间</span>
  <span class="keyword">for</span> _, entry := <span class="keyword">range</span> c.entries { 
    entry.Next = entry.Schedule.Next(now)
  }

  <span class="keyword">for</span> {
    <span class="comment">// Determine the next entry to run.</span>
    <span class="comment">//把entries按照时间排序</span>
    sort.Sort(byTime(c.entries))

    <span class="keyword">var</span> effective time.Time
    <span class="keyword">if</span> <span class="built_in">len</span>(c.entries) ==<span class="number"> 0</span> || c.entries<span class="number">[0</span>].Next.IsZero() {
      <span class="comment">// If there are no entries yet, just sleep - it still handles new entries</span>
      <span class="comment">// and stop requests.</span>
      effective = now.AddDate<span class="number">(10</span>,<span class="number"> 0</span>,<span class="number"> 0</span>)
    } <span class="keyword">else</span> {
      effective = c.entries<span class="number">[0</span>].Next
    }
       

    <span class="keyword">select</span> {
    <span class="keyword">case</span> now = &lt;-time.After(effective.Sub(now)):
      <span class="comment">// Run every entry whose next time was this effective time.</span>
      <span class="keyword">for</span> _, e := <span class="keyword">range</span> c.entries {
        <span class="keyword">if</span> e.Next != effective {
          <span class="keyword">break</span>
        }
        <span class="keyword">go</span> e.Job.Run()
        e.Prev = e.Next
        e.Next = e.Schedule.Next(effective)
      }
      <span class="keyword">continue</span>
    
    <span class="comment">//添加 新的 job 时</span>
    <span class="keyword">case</span> newEntry := &lt;-c.add:
      c.entries = <span class="built_in">append</span>(c.entries, newEntry)
      newEntry.Next = newEntry.Schedule.Next(now)
        
    <span class="comment">//导出当前运行的snapshot</span>
    <span class="keyword">case</span> &lt;-c.snapshot:
      c.snapshot &lt;- c.entrySnapshot()
        
    <span class="comment">//停止</span>
    <span class="keyword">case</span> &lt;-c.stop:
      <span class="keyword">return</span>
    }

    <span class="comment">// 'now' should be updated after newEntry and snapshot cases.</span>
    now = time.Now().Local()
  }
}
</pre></td></tr></table></figure>

<p>其他的代码逻辑都是在 parse cron 的样式。</p>
<h2 id="-">结束</h2>
<p>最后来个 robfig/cron 的 demo 结束 本篇blog</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre>package main

import (
  <span class="string">"fmt"</span>
  <span class="string">"github.com/robfig/cron"</span>
  <span class="string">"time"</span>
)

func main() {
  fmt<span class="preprocessor">.Println</span>(<span class="string">"Go cron test"</span>)
  c := cron<span class="preprocessor">.New</span>()
  c<span class="preprocessor">.AddFunc</span>(<span class="string">"*/5 * * * * *"</span>, func() { fmt<span class="preprocessor">.Println</span>(<span class="string">"Every 5 Seconds"</span>) })
  c<span class="preprocessor">.Start</span>()
  time<span class="preprocessor">.Sleep</span>(<span class="number">900</span> * time<span class="preprocessor">.Second</span>)

}
</pre></td></tr></table></figure>

]]></content>
    <category scheme="nateriver520.github.io/tags/go/" term="go"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Tip.It诞生记]]></title>
    <link href="nateriver520.github.io/2013/12/06/tipit诞生记/"/>
    <id>nateriver520.github.io/2013/12/06/tipit诞生记/</id>
    <published>2013-12-06T15:12:44.000Z</published>
    <updated>2013-12-06T15:41:35.000Z</updated>
    <content type="html"><![CDATA[<h2 id="-">灵光一闪</h2>
<p>之所以想做 Tip.It，完全是受自己初到北京时找房子各种痛苦的启发，当时为了跳过中介租房子，去58同城，豆瓣等各种网站去看房子，比如说下图就是一个典型的58同城的租房页面。</p>
<p><img src="http://ww3.sinaimg.cn/large/7ed77ab1jw1ebaeffqboij20l30d80u5.jpg" alt=""></p>
<p>可以看到电话号码是图片，如果我想记录这个房源，只能一个个号码的往自己的Evernote里面敲，同时还得记录这个房源的网址，以防自己空有号码但是忘记房源信息的尴尬。</p>
<p>即便这样，还是经常导致自己 chrome tab 开了几十个，分不清是否已经电话过某房源的主人的情况发生。</p>
<p>所以我灵光一闪，为什么我们不把这个做成一个可以追述原地址，同时可以保存文字，图片和链接的 todo-list 呢？</p>
<p>这个todo-list不同于evernote，它一打开就是我们要做的东西，里面的内容更像是对网页最有价值的部分的提炼。这个提炼我们会在短时间内频繁的用到，比如我们需要回复某人的邮件，网上看见优惠码等等。</p>
<p>而我自己本人则在不找房子的时候，用来管理我的 bug 清单同时用来记录自己感兴趣但是又需要花时间来阅读的文章链接。</p>
<h2 id="-">动手</h2>
<p>来了 yahoo 之后，自己从最喜欢的 firefox 逐步迁移到了 chrome, 后来经过一番调研后发现 chrome 的 extension 还很好写， 于是自己开始了 chrome 插件的开发之旅。当时自己定的开发目标是这样的。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre>  -<span class="ruby"> 能够 tip 网上的地图，视频，文字以及链接。
</span>  -<span class="ruby"> 通过每条 tip， 用户都能轻易的找到 tip 的原始链接。
</span>  -<span class="ruby"> 用户对每条 tip 添加备注。
</span>  -<span class="ruby"> 能够自动同步，就像evernote一样。
</span>  -<span class="ruby"> 用户手动可以创建各种类型的tip。
</span>  -<span class="ruby"> 有完整的登陆认证功能。
</span>  -<span class="ruby"> 后端的<span class="constant">Api</span>能够支持移动应用的开发。</span>
</pre></td></tr></table></figure>

<p>于是就有了第一版的半成品，有登陆，用户可以自由添加 tip，后端用的是 Rails，数据存储是 Mysql + Redis, Redis 主要用来分发用户的login token。</p>
<p>可是当自己写到同步功能时，各种复杂的情况需要考虑，写出的程序自然是 bug 百出，同时考虑 Tip.It 设计的初衷是用户离线时也能使用，能够像 pocket 一样 archieve delete, 自然而然，程序逻辑变得非常复杂，用户每 sync 一次，mysql db 都要运行数十条语句。一度让我对这个项目产生了一些动摇，从最初的每天 check in code 到后面的长达一个月没有check in 过 code。</p>
<h2 id="-">做减法</h2>
<p><a id="more"></a>
做过产品的人都知道对自己的产品做减法是最难的，尤其是像我这样一行行代码写上来的人，每一行代码 都是你不断重构，冥思苦想而成，砍掉某些功能，就意味着你的之前耗费了无数个夜晚写成的代码被删掉， 但是就像知乎上一个人说的那样。</p>
<blockquote>
<p>因为我们有过多的资源（主要是人力和时间）才会尝试添加各种功能。假设之前的规划是三个月，那么如果自己只有一周的时间的话，我会做什么？得到的产品形态就是减法之后的结果。</p>
</blockquote>
<p>于是经过自己的慎重的思考。</p>
<blockquote>
<p>Tip.It的核心诉求应该是为用户 构建一个足够简单灵活的Todo List, 用户能够随时随地的 tip 文字，图片，并且能够随时查看。</p>
</blockquote>
<p>于是自己做了最终的决定， 砍掉所有网络同步的功能， 这样整个 Tip.It 的代码只有原来的1/4，后端部分全部拿掉，最后 Tip.It 的功能只有下面的部分。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>  -<span class="ruby"> 能够 tip 网上的图片，文字以及链接。
</span>  -<span class="ruby"> 通过每条 tip，用户都能轻易的找到 tip 的原始链接。
</span>  -<span class="ruby"> 用户能够对每条 tip 添加备注。
</span>  -<span class="ruby"> 用户能够自由搜索以前的历史记录。</span>
</pre></td></tr></table></figure>

<h2 id="-">发布</h2>
<p>经过一个周末的删减和修改后，Tip.It 终于做的像我最初想要的样子了。</p>
<p><img src="http://ww2.sinaimg.cn/large/7ed77ab1jw1ebaek1efedj207d0ghglz.jpg" alt=""></p>
<p>最后再经过周日睡前的半小时，Tip.It 有了自己的官网 <a href="http://nateriver520.github.io/tipit/" target="_blank"><a href="http://nateriver520.github.io/tipit/">http://nateriver520.github.io/tipit/</a></a>，就像官网上说的一样，Tip.It 给人的感觉应该是这样：</p>
<blockquote>
<blockquote>
<p>Just find something you like, and Tip it</p>
</blockquote>
</blockquote>
<p>在经过 google 商店的注册，提交，Tip.It 终于上线拉！(这里忍不住吐槽一下 google, 发布个应用要 5 刀，居然地址还不能选中国)</p>
<p>最后，感谢大家的支持，欢迎大家的各种 Feedback :)</p>
]]></content>
    <category scheme="nateriver520.github.io/tags/life/" term="life"/>
    <category scheme="nateriver520.github.io/tags/产品/" term="产品"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Pig On Mac]]></title>
    <link href="nateriver520.github.io/2013/11/26/pig-on-mac/"/>
    <id>nateriver520.github.io/2013/11/26/pig-on-mac/</id>
    <published>2013-11-26T02:14:19.000Z</published>
    <updated>2013-11-26T02:28:40.000Z</updated>
    <content type="html"><![CDATA[<h2 id="install">Install</h2>
<p>首先是 Mac OS 下的安装</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre> <span class="keyword">export</span> JAVA_HOME=$(/usr/libexec/java_home)
 brew <span class="keyword">install</span> pig
</pre></td></tr></table></figure>

<h2 id="run">Run</h2>
<p>Pig 运行分为两种模式，如果需要在本地调试的话，可以使用 shell 模式。</p>
<p>通过运行下面的 command 就行了</p>
<p><strong><em>Shell mode</em></strong></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre> pig <span class="attribute">-x</span> <span class="built_in">local</span>
</pre></td></tr></table></figure>

<h2 id="count-words">Count Words</h2>
<p>下面我们用个简单的统计单词次数的例子做进入 pig 世界的 hello world。</p>
<p>首先我们在网上随便找一篇文章做实验。</p>
<a id="more"></a>

<p>word.txt</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>Thanks again <span class="keyword">for</span> <span class="keyword">the</span> great answers <span class="keyword">and</span> links! Some people comment <span class="keyword">that</span> <span class="keyword">it</span> <span class="keyword">is</span> hard <span class="keyword">to</span> satisfy <span class="keyword">the</span> criteria because core algorithms are
so pervasive <span class="keyword">that</span> <span class="keyword">it</span>'s hard <span class="keyword">to</span> point <span class="keyword">to</span> a specific use. I see <span class="keyword">the</span> difficulty. But I think <span class="keyword">it</span> <span class="keyword">is</span> worthwhile <span class="keyword">to</span> come up <span class="keyword">with</span> specific
examples because <span class="keyword">in</span> <span class="keyword">my</span> experience telling people: <span class="string">"Look, algorithms are important because they are just about everywhere!"</span> <span class="keyword">does</span> <span class="keyword">not</span> work
</pre></td></tr></table></figure>

<p>接下来我们进入  <strong><em>shell</em></strong> 模式，一行行输入下面的语句来看结果。</p>
<figure class="highlight pig"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre>input_file =  load '<span class="property">words</span>.txt' <span class="keyword">as</span> (line);

/* TOKENIZE: split line <span class="keyword">into</span> <span class="property">word</span> column */
<span class="property">words</span> = FOREACH input_file GENERATE FLATTEN(TOKENIZE(line)) <span class="keyword">as</span> <span class="property">word</span>;

grpd = GROUP <span class="property">words</span> <span class="keyword">by</span> <span class="property">word</span>;

cntd = FOREACH grpd GENERATE group, COUNT(<span class="property">words</span>);

/* print <span class="constant">result</span> */
dump cntd;
</pre></td></tr></table></figure>

<p>最后键入 <strong><em>dump cntd</em></strong> 的时候可以看到单词数目已经统计出来了</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="list">(<span class="title">answers</span>,<span class="number">1</span>)</span>
<span class="list">(<span class="title">because</span>,<span class="number">3</span>)</span>
<span class="list">(<span class="title">comment</span>,<span class="number">1</span>)</span>
<span class="list">(<span class="title">people</span>:,<span class="number">1</span>)</span>
<span class="list">(<span class="title">satisfy</span>,<span class="number">1</span>)</span>
<span class="list">(<span class="title">telling</span>,<span class="number">1</span>)</span>
<span class="list">(<span class="title">criteria</span>,<span class="number">1</span>)</span>
<span class="list">(<span class="title">examples</span>,<span class="number">1</span>)</span>
<span class="list">(<span class="title">specific</span>,<span class="number">2</span>)</span>
<span class="list">(<span class="title">important</span>,<span class="number">1</span>)</span>
<span class="list">(<span class="title">pervasive</span>,<span class="number">1</span>)</span>
<span class="list">(<span class="title">algorithms</span>,<span class="number">2</span>)</span>
<span class="list">(<span class="title">experience</span>,<span class="number">1</span>)</span>
<span class="list">(<span class="title">worthwhile</span>,<span class="number">1</span>)</span>
<span class="list">(<span class="title">difficulty</span>.,<span class="number">1</span>)</span>
<span class="list">(<span class="title">everywhere!</span>,<span class="number">1</span>)</span>
</pre></td></tr></table></figure>

<h2 id="more-complicate-example">More Complicate Example</h2>
<p><strong><em>Pig</em></strong> 作为一简单实用的 hadoop 操作语言，同 SQL 的语法类似，支持 join, filter, group by 等操作.</p>
<p>下面我们用个更复杂的例子来看看这门语言的有趣的地方。</p>
<p>我们首先伪造一部分数据,这些数据以空格分开</p>
<ul>
<li>第一行代表用户id</li>
<li>第二行 type: 其中 p 代表用户看过改页面，c 代表用户点击广告</li>
<li>第三行 用户看过的url</li>
</ul>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>    user1 p news<span class="number">.21</span>cn<span class="preprocessor">.com</span>/social/daqian/<span class="number">2008</span>/<span class="number">05</span>/<span class="number">29</span>/<span class="number">4777194</span>_1<span class="preprocessor">.shtml</span>
    user2 c www<span class="number">.6</span>wei<span class="preprocessor">.net</span>/dianshiju/????\xa1\xe9|????do=index
    user1 p www<span class="preprocessor">.shanziba</span><span class="preprocessor">.com</span>/
    user1 p download<span class="preprocessor">.it</span>168<span class="preprocessor">.com</span>/<span class="number">18</span>/<span class="number">1805</span>/<span class="number">13947</span>/<span class="number">13947</span>_3<span class="preprocessor">.shtml</span>
    user2 p you<span class="preprocessor">.video</span><span class="preprocessor">.sina</span><span class="preprocessor">.com</span><span class="preprocessor">.cn</span>/b/<span class="number">5924814</span>-<span class="number">1246200450.</span>html
    user3 c www<span class="preprocessor">.shanziba</span><span class="preprocessor">.com</span>/
    user1 c download<span class="preprocessor">.it</span>168<span class="preprocessor">.com</span>/<span class="number">18</span>/<span class="number">1805</span>/<span class="number">13947</span>/<span class="number">13947</span>_3<span class="preprocessor">.shtml</span>
    user3 p you<span class="preprocessor">.video</span><span class="preprocessor">.sina</span><span class="preprocessor">.com</span><span class="preprocessor">.cn</span>/b/<span class="number">5924814</span>-<span class="number">1246200450.</span>html
    user1 c 
    user3 p
</pre></td></tr></table></figure>

<p>首先我们想统计每个用户在我们的log 中发生了多少次行为。</p>
<figure class="highlight pig"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
</pre></td><td class="code"><pre>Users <span class="subst">=</span> LOAD <span class="string">'server_log.txt'</span> USING PigStorage(<span class="string">' '</span>) as (user ,<span class="keyword">type</span> ,url) ;

<span class="comment">/* filter bad log */</span>
Fltrd <span class="subst">=</span> FILTER Users <span class="keyword">by</span> url is <span class="literal">not</span> <span class="built_in">null</span>;

Grpd <span class="subst">=</span> <span class="keyword">GROUP</span> Fltrd <span class="keyword">by</span> user;

Cntd <span class="subst">=</span> foreach Grpd generate FLATTEN(<span class="keyword">group</span>), COUNT(Fltrd<span class="built_in">.</span>user);

DUMP Cntd;
</pre></td></tr></table></figure>

<p>输出如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="list">(<span class="title">user1</span>,<span class="number">4</span>)</span>
<span class="list">(<span class="title">user2</span>,<span class="number">2</span>)</span>
<span class="list">(<span class="title">user3</span>,<span class="number">2</span>)</span>
</pre></td></tr></table></figure>

<p>如果我们想更进一步，查看每个用户发生了多少次click 和多少次 page view. 则稍显麻烦。</p>
<p>首先我们要把page event 和 click event 分开，这可以通过 pig 的 <strong><em> split </em></strong> 实现。</p>
<p>接着针对分开的 P_EVENT 和 C_EVENT 做 <strong><em>Group</em></strong>。</p>
<p>最后在使用 <strong><em>Join</em></strong> 命令把 Cntd_P 和 Cntd_C 按用户 join 起来。</p>
<figure class="highlight pig"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
</pre></td><td class="code"><pre>Users = LOAD <span class="string">'server_log.txt'</span> <span class="keyword">USING</span> PigStorage(<span class="string">' '</span>) <span class="keyword">as</span> (user ,<span class="keyword">type</span> ,url) ;

Fltrd = FILTER Users <span class="keyword">by</span> url <span class="keyword">is</span> <span class="keyword">not</span> null;

SPLIT Fltrd <span class="keyword">INTO</span> P_EVENT <span class="keyword">if</span> <span class="keyword">type</span> == <span class="string">'p'</span>, 
                 C_EVENT <span class="keyword">if</span> <span class="keyword">type</span> == <span class="string">'c'</span>; 

Grpd_P = <span class="keyword">GROUP</span> P_EVENT <span class="keyword">by</span> user;
Grpd_C = <span class="keyword">GROUP</span> C_EVENT <span class="keyword">by</span> user;

Cntd_P = foreach Grpd_P generate FLATTEN(<span class="keyword">group</span>) <span class="keyword">as</span> group_p,COUNT(P_EVENT.user) <span class="keyword">as</span> p_count;
Cntd_C = foreach Grpd_C generate FLATTEN(<span class="keyword">group</span>) <span class="keyword">as</span> group_c, COUNT(C_EVENT.user) <span class="keyword">as</span> c_count;


Jnd = <span class="keyword">JOIN</span> Cntd_P <span class="keyword">BY</span> group_p, Cntd_C <span class="keyword">BY</span> group_c; 

Cntd_P_C = FOREACH Jnd GENERATE Cntd_P::group_p, Cntd_P::p_count,Cntd_C::c_count;


DUMP Cntd_P_C;
</pre></td></tr></table></figure>

<h2 id="tips">Tips</h2>
<p>总体来看 pig 作为一门类 SQL 语言，其灵活性和方便性在处理较为简单的大数据任务时，相比传统的 hadoop job 有着不可比拟的优势。</p>
<p>但 pig 也有缺点，比如 debug 信息不明确等。 </p>
<p>在日常写 pig 脚本时，可以通过 <strong><em>Describe</em></strong> 的方式来查看当前结果的结构来方便编码。</p>
]]></content>
    <category scheme="nateriver520.github.io/tags/Hadoop/" term="Hadoop"/>
    <category scheme="nateriver520.github.io/tags/Pig/" term="Pig"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[jing js (二)]]></title>
    <link href="nateriver520.github.io/2013/11/10/jing-js-(二)/"/>
    <id>nateriver520.github.io/2013/11/10/jing-js-(二)/</id>
    <published>2013-11-10T01:34:05.000Z</published>
    <updated>2013-11-10T06:01:07.000Z</updated>
    <content type="html"><![CDATA[<h2 id="javascript-engine">Javascript Engine</h2>
<h3 id="parser">Parser</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>  -<span class="ruby"> <span class="constant">Usually</span> generates <span class="constant">AST</span></span>
</pre></td></tr></table></figure>

<h3 id="runtime">Runtime</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>  -<span class="ruby"> <span class="constant">Value</span> representation
</span>  -<span class="ruby"> <span class="constant">Object</span> model
</span>    -<span class="ruby"> <span class="constant">Dictionary</span> mode
</span>    -<span class="ruby"> <span class="constant">Fast</span> mode
</span>  -<span class="ruby"> <span class="constant">Built</span>-<span class="keyword">in</span> <span class="constant">Objects</span>
</span>  -<span class="ruby"> <span class="constant">Misc</span></span>
</pre></td></tr></table></figure>

<h3 id="execution-engine">Execution Engine</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>  -<span class="ruby"> <span class="constant">Execute</span> code</span>
</pre></td></tr></table></figure>

<h3 id="gc">GC</h3>
<h3 id="foreign-function-interface-ffi-">Foreign Function Interface (FFI)</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>  - Handle interaction between JS <span class="keyword">and</span> <span class="string">"the outside world"</span>
  - JS <span class="keyword">call</span> out <span class="keyword">to</span> native <span class="keyword">function</span>
  - Native <span class="keyword">function</span> <span class="keyword">call</span> <span class="keyword">into</span> JS <span class="keyword">function</span>
</pre></td></tr></table></figure>

<h3 id="debugger">Debugger</h3>
<p><a id="more"></a></p>
<h2 id="http-is-hard">Http is Hard</h2>
<h3 id="http-">Http?</h3>
<h3 id="response-code">Response code</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre> -<span class="ruby"> <span class="number">418</span> code is a joke
</span> -<span class="ruby"> <span class="number">5</span>xx server error</span>
</pre></td></tr></table></figure>

<h3 id="client-methods">Client Methods</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre> -<span class="ruby"> <span class="constant">POST</span>
</span> -<span class="ruby"> <span class="constant">GET</span>
</span> -<span class="ruby"> <span class="constant">PUT</span>
</span> -<span class="ruby"> <span class="constant">DELETE</span></span>
</pre></td></tr></table></figure>

<h2 id="lean-development-with-node-js">Lean Development with Node.js</h2>
<h3 id="founding-a-company">Founding a company</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre> -<span class="ruby"> <span class="constant">Find</span> problem <span class="keyword">and</span> want to fix it
</span> -<span class="ruby"> <span class="constant">A</span> little crazy</span>
</pre></td></tr></table></figure>

<h3 id="customer-interviews">Customer Interviews</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre> -<span class="ruby"> open ended questions
</span> -<span class="ruby"> people you don<span class="string">'t know</span></span>
</pre></td></tr></table></figure>

<h3 id="why-node-js-">Why node.js?</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre> -<span class="ruby"> community
</span> -<span class="ruby"> open minded
</span> -<span class="ruby"> data collection</span>
</pre></td></tr></table></figure>

<h3 id="open-minded">Open minded</h3>
<h3 id="toolkit">Toolkit</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre> -<span class="ruby"> <span class="constant">Express</span>
</span> -<span class="ruby"> <span class="constant">Postgres</span>
</span> -<span class="ruby"> <span class="constant">Node</span>-orm
</span> -<span class="ruby"> <span class="constant">Underscore</span>
</span> -<span class="ruby"> <span class="constant">Request</span>
</span> -<span class="ruby"> <span class="constant">Moment</span>
</span> -<span class="ruby"> <span class="constant">Phantom</span>.js</span>
</pre></td></tr></table></figure>

<h3 id="resources">Resources</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre> -<span class="ruby"> <span class="constant">The</span> <span class="constant">Lean</span> <span class="constant">Startup</span>
</span> -<span class="ruby"> <span class="constant">The</span> <span class="constant">Four</span> <span class="constant">Steps</span> to the <span class="constant">Epiphany</span></span>
</pre></td></tr></table></figure>

<h2 id="the-hitchhiker-s-guide">The Hitchhiker&#39;s Guide</h2>
<h3 id="server-side">Server side</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre> -<span class="ruby"> express</span>
</pre></td></tr></table></figure>

<h3 id="single-page-app-">Single-page app?</h3>
<h3 id="client-side">Client Side</h3>
<h3 id="webrtc">WebRTC</h3>
<h3 id="framework">Framework</h3>
<h3 id="client-side">Client Side</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>  -<span class="ruby"> <span class="constant">CommonJS</span>
</span>  -<span class="ruby"> <span class="constant">Require</span> .js
</span>  -<span class="ruby"> <span class="constant">Angular</span>
</span>  -<span class="ruby"> <span class="constant">Ember</span></span>
</pre></td></tr></table></figure>

<h3 id="github">Github</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>jingjs<span class="attribute">-talk</span>
</pre></td></tr></table></figure>

]]></content>
    <category scheme="nateriver520.github.io/tags/life/" term="life"/>
    <category scheme="nateriver520.github.io/tags/js/" term="js"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[jing js (一)]]></title>
    <link href="nateriver520.github.io/2013/11/09/jing-js-(一)/"/>
    <id>nateriver520.github.io/2013/11/09/jing-js-(一)/</id>
    <published>2013-11-09T12:52:30.000Z</published>
    <updated>2013-11-10T06:02:03.000Z</updated>
    <content type="html"><![CDATA[<h2 id="info">Info</h2>
<p>这次<strong><em>lyk</em></strong>同学北上，参加 <a href="http://jingjs.org/" target="_blank">jingjs</a> ,我托lyk童鞋的福，也去jing js打了次酱油。</p>
<p>以下是本次大会两天议程的简要笔记。</p>
<h2 id="a-better-world-for-node-js">A Better World for node.js</h2>
<h3 id="debug">Debug</h3>
<p>node-inspector</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>slc <span class="built_in">debug</span> blog
</pre></td></tr></table></figure>

<h3 id="performance">Performance</h3>
<p><strong><em>strongOps</em></strong></p>
<p>First  sign up to get app key.</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="tag">slc</span> <span class="tag">strongops</span> <span class="attr_selector">[options]</span>
</pre></td></tr></table></figure>

<p><a id="more"></a></p>
<h2 id="bitcoin">Bitcoin</h2>
<h3 id="coinpunk">Coinpunk</h3>
<p>open source bitcoin wallet</p>
<p>We cannot put key in web server.</p>
<p>Move <strong><em>bitcoin key</em></strong> to brower</p>
<p>Libraries</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre> -<span class="ruby"> <span class="constant">Cryptojs</span>
</span> -<span class="ruby"> <span class="constant">SJCL</span>
</span> -<span class="ruby"> <span class="constant">JSBN</span>
</span> -<span class="ruby"> <span class="constant">BigNumber</span>.js
</span> -<span class="ruby"> <span class="constant">BitcoinJS</span>-<span class="constant">LIB</span>
</span> -<span class="ruby"> <span class="constant">RandJS</span></span>
</pre></td></tr></table></figure>

<h2 id="my-year-with-node-js">My year with Node.js</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>code + tests + documentation = <span class="class"><span class="keyword">module</span></span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre> -<span class="ruby"> code
</span>  -<span class="ruby"> implementation
</span>  -<span class="ruby"> interfaces
</span> -<span class="ruby"> test
</span> -<span class="ruby"> documentation</span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="constant">Everything</span> is a <span class="class"><span class="keyword">module</span>, <span class="title">once</span> <span class="title">finish</span>, <span class="title">you</span> <span class="title">can</span> <span class="title">open</span> <span class="title">source</span></span>
</pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>Service <span class="keyword">is</span>  <span class="keyword">provided</span>  <span class="keyword">by</span> modules
System  <span class="keyword">is</span>  <span class="keyword">provided</span>  <span class="keyword">by</span> services
</pre></td></tr></table></figure>

<h2 id="substack">Substack</h2>
<h3 id="run">run</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre>curl <span class="keyword">http</span>://<span class="number">192.168</span><span class="number">.1</span><span class="number">.129</span>:<span class="number">5000</span>/modules.tar.gz | tar xz
Inside you will find <span class="number">3</span> adventures:
learnyounode - learn <span class="operator">the</span> basics <span class="operator">of</span> node
stream-adventure - learn you <span class="built_in">to</span> use streams <span class="operator">in</span> node
levelmeup - learn <span class="operator">the</span> basics <span class="operator">of</span> leveldb
To run <span class="operator">an</span> adventure, <span class="built_in">do</span> `npm run $ADVENTURE` like this:
npm run stream-adventure
To run <span class="operator">the</span> leveldb adventures, you will need <span class="built_in">to</span> run `npm rebuild` <span class="built_in">to</span> rebuild <span class="operator">the</span> leveldb bindings <span class="keyword">for</span> your <span class="built_in">platform</span> <span class="keyword">if</span> you<span class="string">'re not running x64 linux.</span>
</pre></td></tr></table></figure>

<h3 id="level-db">level db</h3>
<h3 id="cities1000">cities1000</h3>
<h2 id="cpujs">CPUJS</h2>
<h3 id="-cpu-">用户端CPU性能监控</h3>
<ul>
<li>通过执行时间来衡量, 超过100ms 就感觉很慢, 所以把100ms当成顶峰。</li>
<li>卡的占比 LTP(Lag Time Percentage)</li>
</ul>
<h3 id="-">任务式编程调度</h3>
<ul>
<li>one task = one function or one function includes a lot of functions.</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>   CPUJS.load(foo());
</pre></td></tr></table></figure>

<h3 id="task-manager">Task Manager</h3>
<ul>
<li>Loading tasks</li>
<li>Killing tasks </li>
</ul>
<h2 id="zero-to-ready-with-geddy">Zero to Ready With Geddy</h2>
<h3 id="geddy">Geddy</h3>
<ul>
<li>Start server</li>
<li>Generators</li>
<li>Run jake</li>
</ul>
<h2 id="on-bigpipe-on-node-js">On BigPipe On Node.js</h2>
<h3 id="on-bigpipe">On Bigpipe</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>Improve web page loading performance <span class="keyword">by</span> facebook
</pre></td></tr></table></figure>

<ul>
<li>Chunked Encoding<ul>
<li>content length vs chunked encoding ?</li>
<li>chunked encoding don&#39;t need write content length, just use <strong><em>res.write</em></strong></li>
</ul>
</li>
<li>Zoom in Bussiness Logic part<ul>
<li>every part have different time to gernerate. </li>
<li>But  Chunked Encoding cannot transfer part by part.</li>
</ul>
</li>
<li>Bigpipe<ul>
<li>bigpipe can do this.</li>
<li>browser use javascript to show page by Chunked Encoding</li>
</ul>
</li>
<li>Why node for Bigpipe?<ul>
<li>HTML generate by Front developer.</li>
</ul>
</li>
</ul>
<h2 id="pemelo-untitled">Pemelo...Untitled</h2>
<h3 id="what-">What?</h3>
<ul>
<li>game server framework</li>
<li>Realtime users online game</li>
</ul>
<h3 id="framework">Framework</h3>
<ul>
<li>Abstract servers </li>
<li>Abstract request/response and broadcast/push</li>
<li>rpc framework</li>
</ul>
<h3 id="evolution">Evolution</h3>
<ul>
<li>Pemelo connector</li>
<li>Message compress</li>
<li>Reliability<ul>
<li>Zookeeper</li>
</ul>
</li>
<li>New features<ul>
<li>Plugin mechanism</li>
<li>Crontab &amp; Filter</li>
</ul>
</li>
</ul>
<h3 id="message-push-platform">Message push platform</h3>
<ul>
<li>long connection</li>
<li>Use<ul>
<li>Baidu </li>
<li>SNDA </li>
<li>jpush </li>
<li>getui</li>
</ul>
</li>
<li>Framework<ul>
<li>Zookeeper</li>
<li>Redis</li>
<li>MQTT</li>
<li>Socket IO</li>
</ul>
</li>
<li>Broadcast Message<ul>
<li>Create channel</li>
<li>Filter clients</li>
</ul>
</li>
<li>Multiplex link<ul>
<li>Share one link with push-server</li>
</ul>
</li>
<li>Tips<ul>
<li>remeber bind <strong><em>cpu</em></strong></li>
</ul>
</li>
</ul>
<h2 id="data-visualization">Data Visualization</h2>
<h3 id="junk-charts">junk charts</h3>
<h3 id="lying">Lying</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>  -<span class="ruby"> size of effect of show data
</span>  -<span class="ruby"> pie is bad <span class="keyword">for</span> you</span>
</pre></td></tr></table></figure>

<h3 id="what-can-we-do-">what can we do?</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>  -<span class="ruby"> less is more
</span>  -<span class="ruby"> use a table</span>
</pre></td></tr></table></figure>

<h3 id="modern-tools">Modern tools</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>  -<span class="ruby"> d3
</span>  -<span class="ruby"> <span class="constant">Canvas</span> vs <span class="constant">SVG</span>
</span>  -<span class="ruby"> <span class="constant">Interactivity</span>
</span>  -<span class="ruby"> <span class="constant">Extensibility</span>
</span>   -<span class="ruby"> <span class="constant">Google</span> <span class="constant">Charts</span></span>
</pre></td></tr></table></figure>

<h3 id="tips">tips</h3>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>  -<span class="ruby"> indeed
</span>  -<span class="ruby"> find job</span>
</pre></td></tr></table></figure>

]]></content>
    <category scheme="nateriver520.github.io/tags/life/" term="life"/>
    <category scheme="nateriver520.github.io/tags/js/" term="js"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Thrift入门 (一)]]></title>
    <link href="nateriver520.github.io/2013/11/06/thrift入门-(一)/"/>
    <id>nateriver520.github.io/2013/11/06/thrift入门-(一)/</id>
    <published>2013-11-06T06:22:06.000Z</published>
    <updated>2013-11-06T06:53:17.000Z</updated>
    <content type="html"><![CDATA[<h2 id="install">Install</h2>
<p>Go to <a href="http://thrift.apache.org/download/" target="_blank">thrift</a> page download thrift.</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre>1
2
3
4
</pre></td><td class="code"><pre>brew install boost
 ./configure --without-python
<span class="built_in">sudo</span> make
<span class="built_in">sudo</span> make install
</pre></td></tr></table></figure>

<h2 id="maven">Maven</h2>
<p>add depndency</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">dependency</span>&gt;</span>
    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.apache.thrift<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>libthrift<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
    <span class="tag">&lt;<span class="title">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="title">version</span>&gt;</span>
<span class="tag">&lt;/<span class="title">dependency</span>&gt;</span>

<span class="tag">&lt;<span class="title">dependency</span>&gt;</span>
  <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
  <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
  <span class="tag">&lt;<span class="title">version</span>&gt;</span>1.6.6<span class="tag">&lt;/<span class="title">version</span>&gt;</span>
<span class="tag">&lt;/<span class="title">dependency</span>&gt;</span>

<span class="tag">&lt;<span class="title">dependency</span>&gt;</span>
  <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
  <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
  <span class="tag">&lt;<span class="title">version</span>&gt;</span>1.6.6<span class="tag">&lt;/<span class="title">version</span>&gt;</span>
<span class="tag">&lt;/<span class="title">dependency</span>&gt;</span>

<span class="tag">&lt;<span class="title">dependency</span>&gt;</span>
  <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
  <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
  <span class="tag">&lt;<span class="title">version</span>&gt;</span>1.2.16<span class="tag">&lt;/<span class="title">version</span>&gt;</span>
<span class="tag">&lt;/<span class="title">dependency</span>&gt;</span>
</pre></td></tr></table></figure>

<p><a id="more"></a>
add plugin</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">plugin</span>&gt;</span>
    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>org.apache.thrift.tools<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>maven-thrift-plugin<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
    <span class="tag">&lt;<span class="title">version</span>&gt;</span>0.1.10<span class="tag">&lt;/<span class="title">version</span>&gt;</span>
    <span class="tag">&lt;<span class="title">configuration</span>&gt;</span>
        <span class="tag">&lt;<span class="title">thriftExecutable</span>&gt;</span>/usr/local/bin/thrift<span class="tag">&lt;/<span class="title">thriftExecutable</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">configuration</span>&gt;</span>
    <span class="tag">&lt;<span class="title">executions</span>&gt;</span>
        <span class="tag">&lt;<span class="title">execution</span>&gt;</span>
            <span class="tag">&lt;<span class="title">id</span>&gt;</span>thrift-sources<span class="tag">&lt;/<span class="title">id</span>&gt;</span>
            <span class="tag">&lt;<span class="title">phase</span>&gt;</span>generate-sources<span class="tag">&lt;/<span class="title">phase</span>&gt;</span>
            <span class="tag">&lt;<span class="title">goals</span>&gt;</span>
                <span class="tag">&lt;<span class="title">goal</span>&gt;</span>compile<span class="tag">&lt;/<span class="title">goal</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">goals</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">execution</span>&gt;</span>
        <span class="tag">&lt;<span class="title">execution</span>&gt;</span>
            <span class="tag">&lt;<span class="title">id</span>&gt;</span>thrift-test-sources<span class="tag">&lt;/<span class="title">id</span>&gt;</span>
            <span class="tag">&lt;<span class="title">phase</span>&gt;</span>generate-test-sources<span class="tag">&lt;/<span class="title">phase</span>&gt;</span>
            <span class="tag">&lt;<span class="title">goals</span>&gt;</span>
                <span class="tag">&lt;<span class="title">goal</span>&gt;</span>testCompile<span class="tag">&lt;/<span class="title">goal</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">goals</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">execution</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">executions</span>&gt;</span>
<span class="tag">&lt;/<span class="title">plugin</span>&gt;</span>
</pre></td></tr></table></figure>

<h2 id="hello-world">Hello World</h2>
<p>Now we can define our service.</p>
<p>first create the file <strong><em>test.thrift</em></strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="class"><span class="keyword">namespace</span> <span class="title">java</span> <span class="title">com</span>.<span class="title">app</span>.<span class="title">testThrift</span>
<span class="title">service</span> <span class="title">Test</span>{</span>

 <span class="keyword">void</span> say(<span class="number">1</span>: <span class="keyword">string</span> word)

}
</pre></td></tr></table></figure>

<p>We define a function <strong><em>say</em></strong>, then we run command to generate java class</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="comment">thrift</span>  <span class="literal">-</span><span class="literal">-</span><span class="comment">gen</span> <span class="comment">java</span> <span class="comment">test</span><span class="string">.</span><span class="comment">thrfit</span>
</pre></td></tr></table></figure>

<p>We copy the class to our java project. and implements the <strong><em>test.Iface</em></strong> interface</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestImpl</span> <span class="keyword">implements</span> <span class="title">Test</span>.<span class="title">Iface</span> {</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span>(String word) <span class="keyword">throws</span> TException{
        System.out.println(<span class="string">"I am server, I want to say: "</span> + word);
    }
}
</pre></td></tr></table></figure>

<p>Now we build the service to let server say something.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="code"><pre><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Server</span> {</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startServer</span>() {
        <span class="keyword">try</span> {

            TServerSocket serverTransport = <span class="keyword">new</span> TServerSocket(<span class="number">1234</span>);

            Test.Processor process = <span class="keyword">new</span> Processor(<span class="keyword">new</span> TestImpl());

            Factory portFactory = <span class="keyword">new</span> TBinaryProtocol.Factory(<span class="keyword">true</span>, <span class="keyword">true</span>);

            Args args = <span class="keyword">new</span> Args(serverTransport);
            args.processor(process);
            args.protocolFactory(portFactory);

            TServer server = <span class="keyword">new</span> TThreadPoolServer(args);
            server.serve();
        } <span class="keyword">catch</span> (TTransportException e) {
            e.printStackTrace();
        }
    }

    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) {
        Server server = <span class="keyword">new</span> Server();
        server.startServer();
    }
}
</pre></td></tr></table></figure>

<p>We also should have a client to send word.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
</pre></td><td class="code"><pre><span class="keyword">import</span> org.apache.thrift.TException;
<span class="keyword">import</span> org.apache.thrift.protocol.TBinaryProtocol;
<span class="keyword">import</span> org.apache.thrift.protocol.TProtocol;
<span class="keyword">import</span> org.apache.thrift.transport.TSocket;
<span class="keyword">import</span> org.apache.thrift.transport.TTransport;
<span class="keyword">import</span> org.apache.thrift.transport.TTransportException;

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> {</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startClient</span>() {
        TTransport transport;
        <span class="keyword">try</span> {
            transport = <span class="keyword">new</span> TSocket(<span class="string">"localhost"</span>, <span class="number">1234</span>);
            TProtocol protocol = <span class="keyword">new</span> TBinaryProtocol(transport);
            Test.Client client = <span class="keyword">new</span> Test.Client(protocol);
            transport.open();
            client.say(<span class="string">" Hello I am client"</span>);
            transport.close();
        } <span class="keyword">catch</span> (TTransportException e) {
            e.printStackTrace();
        } <span class="keyword">catch</span> (TException e) {
            e.printStackTrace();
        }
    }

    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(String[] args) {
        Client client = <span class="keyword">new</span> Client();
        client.startClient();
    }
}
</pre></td></tr></table></figure>

<p>Now when start <strong><em>server</em></strong> and run <strong><em>client</em></strong>, the message will show like this:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="keyword">I</span> am server, <span class="keyword">I</span> want to say:  Hello <span class="keyword">I</span> am client
</pre></td></tr></table></figure>

<h2 id="reference">Reference</h2>
<p><a href="http://roclinux.cn/?p=3316" target="_blank">Linux大棚版Thrift入门教程</a></p>
<p><a href="http://www.cnblogs.com/johnc/archive/2011/06/19/2084508.html" target="_blank">Thrift java服务器与客户端示例</a></p>
]]></content>
    <category scheme="nateriver520.github.io/tags/thrift/" term="thrift"/>
    <category scheme="nateriver520.github.io/tags/maven/" term="maven"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[永远不要放弃做梦的权利]]></title>
    <link href="nateriver520.github.io/2013/11/03/永远不要放弃做梦的权利/"/>
    <id>nateriver520.github.io/2013/11/03/永远不要放弃做梦的权利/</id>
    <published>2013-11-02T16:34:36.000Z</published>
    <updated>2013-11-02T16:41:08.000Z</updated>
    <content type="html"><![CDATA[<h2 id="-">引言</h2>
<p>时间过的真快，自己不知不觉已经工作了6个多月，又到了新一年的毕业季，突然翻出去年此时写的一篇文章还是蛮有感慨的。</p>
<h2 id="-">去年</h2>
<p>前不久终于下了决定在腾讯、微软(苏州)、EMC、Yahoo四家公司中选择Yahoo，去遥远的帝都开始另一段新的旅程。回首求职的9月到11月这三个月，可以说觉得疲惫而又充满了挑战，这是人生是一段不可多得的经历，下面我会以关键词的形式分享这段时间里的心得。</p>
<p><a id="more"></a></p>
<h2 id="-">有了开始，永远不晚</h2>
<p>似乎从一开始，自己就属于慢热型的人。在研一的时候，自己并没有打算将来从事IT行业的工作，所以基本上就没有怎么写过代码。后来到了研二看周围的同学纷纷出去实习，由于自己迟迟没有下定决心，便决定找家IT公司实习一下，记忆中那段时间是最苦闷的日子，海投了很多公司：IBM、思科、EMC等等，每每看到实习生岗位的职位描述感觉都是被BS的节奏，于是自己下定决心恶补一下，听从师兄、师姐的建议，看了《XX宝典》等一系列书籍，还看了各种面经以及参照职位描述上的各知识点广撒网，在那两周里面，前期遭到了IBM、爱立信等一系列公司的BS，后来在痛定思过，在地铁、实验室等各种环境不间断的恶补知识，那段时间真是自己最努力的时候，最后收到了EMC和思科的Offer，最终依照实习岗位的喜好选择了EMC，从此踏上了IT行业的不归路。</p>
<p>可以说自己从正式进入IT行业到最终开始找工作，只学习了9个月的编程，但是这段时间足够你找到你满意的东西，只要有了开始。</p>
<h2 id="-">遇到挫折，永不放弃</h2>
<p>正式开始找工作是从9月中旬开始的，因为自己一直在EMC实习，所以EMC内部的实习生招聘Green Channel开始的比较早，所以就那时就开始准备了，经过一个周末带上一个周一的复习后，比较幸运的通过面试，最终拿到了EMC的offer。</p>
<p>但是我并不想重点讲这段内容，我更想说的是，在接到EMC 
Offer的那天中午，班长突然短信说有家名为中软的公司在学校招聘，年薪还行，当时抱着练兵的心态就和我的同学们浩浩荡荡的去笔试面试了，这是我找工作以来最惨痛的一次失败，宣讲会后，就直接开始笔试了，我二话不说选了我当时最拿手的.NET来做，做下来感觉很好，以至于当招聘人员叫我名字的时候，我一度是以为叫我去面试，结果只是冷冰冰的说了句“同学，你可以回去了。”全场100多人，我作为仅有的几个被BS的人灰溜溜的离开了会议室，当时场面的尴尬可想而知，后来我在实验室坐了很久，思考到底是什么问题导致了这次失败，我意识到我能拿到EMC的Offer纯粹是幸运，而自己的基础知识一塌糊涂，如果在这样下去，我最终只能呆在EMC而看不到外面的天空。</p>
<p>很快的中兴的第二次笔试如期而至，有了第一次的惨痛失败，我不敢轻敌，从这家公司的历年试卷开始认真准备，无奈时间太短，中兴基本上全是C语言、C++的题目，而自己对这方面基本没有实际的编码经验，结果可想而知笔试题目做的一塌糊涂，不过中兴似乎不看重笔试成绩，成功进入了面试，在后来做性格测试时选择放弃了中兴。</p>
<p>再后来十一长假的到，来给我了一段宝贵的缓冲期，本来打算回家的我果断选择放弃，利用十一好好的过了遍《C++ Primer》等一系列的书籍，至此最擅长的语言变成C++（^_^）。</p>
<p>这段经历告诉我，挫折会出现在每个人的旅途上，永不放弃，迎难而上吧，少年。</p>
<h2 id="-">好基友必不可少</h2>
<p>在EMC实习的这段时候，我、小Z还有PP是本科早就相识的同学，后来一个契机小Z接了一个关于Sina Weibo的项目，我厚着脸皮加入了小z的微博项目组，在小z和PP同学的带领下开始了Ruby的编程之旅。那段时间说起来是我最为繁忙的时候，白天在EMC实习，回来后会继续写代码到凌晨，周末通常也会搭进去，但是这段时间却是最开心的时候，感觉到无比的充实，后来我们找工作的时候，也结成了小分队，相互扶持，定期聚餐，让找工作这个无比让人烦躁的过程，变成了一段美好的回忆。</p>
<p>其实找工作的时候，项目经历会占到一个非常重要的比重，如果面试官感兴趣，面试官会不停的追问下去，如果相谈甚欢会有个不错的加成分，我们当时接到微博这个项目可以说非常幸运，让我们三个人在项目经历这块有了不错印象分。</p>
<p>最后小z去了思科，PP去了建行。</p>
<p>截止到目前为止，这个项目还在运行中，上面的数据已接近了1亿。</p>
<h2 id="-">追随自己的内心</h2>
<p>在EMC实习的这段时间里面，自己逐渐喜欢了IT行业，当时收到小Z等一干人的熏陶，自己内心已经有了方向，想去一家互联网公司，参与一个伟大项目，让很多人使用，享受其中的成就感，所以在找工作开始我的目标锁定了国内的腾讯和百度。</p>
<p>说来有趣，直到找工作的最后，我还是没修正我笔试弱，面试强的特点，在笔试腾讯的前一天晚上，我第一次失眠，因为我知道这是我加入这家公司的唯一机会，必须好好把握，结果笔试出来和周围的同学一对答案，知道自己错了不少，心里对腾讯是否给面试机会完全没底，心里不停的对自己说如果腾讯给我机会面试我一定会拿到offer，我始终记得腾讯发面试通知的那个下午，我还在地铁上由于迟迟收不到面试短信而心急如焚，以至于突然收到短信时，我高兴的跳了起来还吓了周围的人一跳，后来参加面试反而没有了当初的窘迫，一路顺风接到offer。</p>
<p>再后来我陆续拿到了yahoo和微软的Offer，最终面临四选一的选择，一开始打算选择腾讯，一个是职位还行，还有就是位置在上海，可以和同学合租比较有趣，直到后来有天下午接到了yahoo open day的邀请，我抱着去看看的心态，去帝都参与了这次活动，结果在经过了yahoo的项目介绍后，我开始犹豫了，我反复的问自己：“这些项目不是正是我梦想中想参与的，能够影响无数人人的项目吗？”在经过咨询数人后，最终选定了Yahoo公司。</p>
<p>其实在写下这个关键词的时候，我自己也不知道选择是对还是不对，但是自己就是这么一路走过来的，当初实习选EMC等等都是如此，即便将来不顺，自己也不会后悔，毕竟人生转瞬即逝，追寻自己的理想才是真正的活过。</p>
<p>以上就是我的求职心得，这篇并不是各大公司的面经，如果你想看面经，各大论坛都有很多，我更想从一个过来人的角度讲述我这段路上的所思所想，希望能帮到你想起些什么。</p>
<p>最后，感谢下一起求职的战友们-小Z、PP等等，没有你们，这段路程不会这么有趣^_^。</p>
]]></content>
    <category scheme="nateriver520.github.io/tags/life/" term="life"/>
    <category scheme="nateriver520.github.io/tags/求职/" term="求职"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[用Express搭建 blog (一)]]></title>
    <link href="nateriver520.github.io/2013/11/02/用express搭建-blog-(一)/"/>
    <id>nateriver520.github.io/2013/11/02/用express搭建-blog-(一)/</id>
    <published>2013-11-02T15:46:58.000Z</published>
    <updated>2013-11-02T16:00:30.000Z</updated>
    <content type="html"><![CDATA[<h2 id="info">Info</h2>
<p>公司马上要举行 hack day 了，这次决定和小伙伴用 Express 作为框架来搭建我们的应用，所以昨天搭出来UI后，今天开始系统的学习下 Express。</p>
<h2 id="start">Start</h2>
<p>首先是express的全局设置。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="built_in">sudo</span> npm install -g express
</pre></td></tr></table></figure>

<p>接着我们试着用express搭建一个简单的blog程序
在work path 运行命令</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>express <span class="operator">-e</span> ejs blog
</pre></td></tr></table></figure>

<p>可以看到express已经帮你创建了一系列的模板程序。接着进入blog目录安装ejs等相关依赖。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="built_in">cd</span> blog && npm install
</pre></td></tr></table></figure>

<p>运行</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>node app
</pre></td></tr></table></figure>

<p>并访问<a href="http://localhost:3000/" target="_blank">http://localhost:3000/</a> ,简单的hello world 程序已经生成。</p>
<a id="more"></a>


<p>下面来看下程序的整个结构，运行command</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>tree -<span class="keyword">I</span>  node*
</pre></td></tr></table></figure>

<p>express的模板程序结构看起来和rails的结构很相像。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
</pre></td><td class="code"><pre>├── app<span class="preprocessor">.js</span>
├── package<span class="preprocessor">.json</span>
├── public
│   ├── images
│   ├── javascripts
│   └── stylesheets
│       └── style<span class="preprocessor">.css</span>
├── routes
│   ├── index<span class="preprocessor">.js</span>
│   └── user<span class="preprocessor">.js</span>
└── views
    └── index<span class="preprocessor">.ejs</span>
</pre></td></tr></table></figure>

<h2 id="blog-design">Blog Design</h2>
<p>对express的模板程序有了基本概念后，我们开始来实现一个稍微复杂的blog。
blog 需要实现下面的功能。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>/：首页
/login：登录
/reg：注册
/<span class="built_in">post</span>：发表文章
/logout：登出
</pre></td></tr></table></figure>

<p>blog 的数据存储采用mongodb。</p>
<h2 id="improve">Improve</h2>
<p>首先我门先简单的改进下我们当前的blog程序。</p>
<p>首先是重写默认的路由</p>
<p>在 <strong><em>app.js</em></strong> 里面我们可以看到以下两行语句。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>app.get(<span class="string">'/'</span>, routes.index);
app.get(<span class="string">'/users'</span>, user.list);
</pre></td></tr></table></figure>

<p>我们把这部分代码移到 <strong><em>routes/index.js</em></strong> 使代码结构看起来更为清晰。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="code"><pre>module.exports = <span class="function"><span class="keyword">function</span><span class="params">(app)</span>{</span>    
    app.get(<span class="string">'/'</span>,<span class="function"><span class="keyword">function</span><span class="params">(req,res)</span>{</span>
        res.render(<span class="string">'index'</span>, { title: <span class="string">'主页'</span> });
    });
    app.get(<span class="string">'/reg'</span>,<span class="function"><span class="keyword">function</span><span class="params">(req,res)</span>{</span>
        res.render(<span class="string">'reg'</span>, { title: <span class="string">'注册'</span> });
    });
    app.post(<span class="string">'/reg'</span>,<span class="function"><span class="keyword">function</span><span class="params">(req,res)</span>{</span>
    });
    app.get(<span class="string">'/login'</span>,<span class="function"><span class="keyword">function</span><span class="params">(req,res)</span>{</span>
        res.render(<span class="string">'login'</span>, { title: <span class="string">'登录'</span> });
    });
    app.post(<span class="string">'/login'</span>,<span class="function"><span class="keyword">function</span><span class="params">(req,res)</span>{</span>
    });
    app.get(<span class="string">'/logout'</span>,<span class="function"><span class="keyword">function</span><span class="params">(req,res)</span>{</span>
    });
    app.get(<span class="string">'/post'</span>,<span class="function"><span class="keyword">function</span><span class="params">(req,res)</span>{</span>
        res.render(<span class="string">'post'</span>, { title: <span class="string">'发表'</span> });
    });
    app.post(<span class="string">'/post'</span>,<span class="function"><span class="keyword">function</span><span class="params">(req,res)</span>{</span>
    }); 
};
</pre></td></tr></table></figure>

<p>同时在 <strong><em>app.js</em></strong>里将上面两行代码替换成。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="function">routes(app)</span>;
</pre></td></tr></table></figure>

<p>Ok,接下来我们添加相应的ejs，实现后的前端界面结构应该如图所示。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
</pre></td><td class="code"><pre>└── views
    ├── footer<span class="preprocessor">.ejs</span>
    ├── header<span class="preprocessor">.ejs</span>
    ├── index<span class="preprocessor">.ejs</span>
    ├── login<span class="preprocessor">.ejs</span>
    └── reg<span class="preprocessor">.ejs</span>
</pre></td></tr></table></figure>

<p><strong><em>footer.ejs</em></strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="tag">&lt;/<span class="title">article</span>&gt;</span>
<span class="tag">&lt;/<span class="title">body</span>&gt;</span>
<span class="tag">&lt;/<span class="title">html</span>&gt;</span>
</pre></td></tr></table></figure>

<p><strong><em>header.ejs</em></strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre><span class="doctype">&lt;!DOCTYPE html&gt;</span>
<span class="tag">&lt;<span class="title">html</span>&gt;</span>
<span class="tag">&lt;<span class="title">head</span>&gt;</span>
<span class="tag">&lt;<span class="title">meta</span> <span class="attribute">http-equiv</span>=<span class="value">"Content-Type"</span> <span class="attribute">content</span>=<span class="value">"text/html; charset=UTF-8"</span>&gt;</span>
<span class="tag">&lt;<span class="title">title</span>&gt;</span>Blog<span class="tag">&lt;/<span class="title">title</span>&gt;</span>
<span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"stylesheets/style.css"</span>&gt;</span>
<span class="tag">&lt;/<span class="title">head</span>&gt;</span>
<span class="tag">&lt;<span class="title">body</span>&gt;</span>

<span class="tag">&lt;<span class="title">header</span>&gt;</span>
<span class="tag">&lt;<span class="title">h1</span>&gt;</span><span class="vbscript">&lt;%= title %&gt;</span><span class="tag">&lt;/<span class="title">h1</span>&gt;</span>
<span class="tag">&lt;/<span class="title">header</span>&gt;</span>

<span class="tag">&lt;<span class="title">nav</span>&gt;</span>
<span class="tag">&lt;<span class="title">span</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">title</span>=<span class="value">"主页"</span> <span class="attribute">href</span>=<span class="value">"/"</span>&gt;</span>home<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>
<span class="tag">&lt;<span class="title">span</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">title</span>=<span class="value">"登录"</span> <span class="attribute">href</span>=<span class="value">"/login"</span>&gt;</span>login<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>
<span class="tag">&lt;<span class="title">span</span>&gt;</span><span class="tag">&lt;<span class="title">a</span> <span class="attribute">title</span>=<span class="value">"注册"</span> <span class="attribute">href</span>=<span class="value">"/reg"</span>&gt;</span>register<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>
<span class="tag">&lt;/<span class="title">nav</span>&gt;</span>
<span class="tag">&lt;<span class="title">article</span>&gt;</span>
</pre></td></tr></table></figure>

<p><strong><em>index.ejs</em></strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre><span class="vbscript">&lt;%- include header %&gt;</span>
这是主页
<span class="vbscript">&lt;%- include footer %&gt;</span>
</pre></td></tr></table></figure>

<p><strong><em>login.ejs</em></strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="vbscript">&lt;%- include header %&gt;</span>
<span class="tag">&lt;<span class="title">form</span> <span class="attribute">method</span>=<span class="value">"post"</span>&gt;</span>
用户名：<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"username"</span> /&gt;</span><span class="tag">&lt;<span class="title">br</span> /&gt;</span>
密码：   <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"password"</span> <span class="attribute">name</span>=<span class="value">"password"</span> /&gt;</span><span class="tag">&lt;<span class="title">br</span> /&gt;</span>
        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"submit"</span> <span class="attribute">value</span>=<span class="value">"登录"</span> /&gt;</span>
<span class="tag">&lt;/<span class="title">form</span>&gt;</span>
<span class="vbscript">&lt;%- include footer %&gt;</span>
</pre></td></tr></table></figure>

<p><strong><em>reg.ejs</em></strong></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="vbscript">&lt;%- include header %&gt;</span>
<span class="tag">&lt;<span class="title">form</span> <span class="attribute">method</span>=<span class="value">"post"</span>&gt;</span>
用户名：<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"username"</span> /&gt;</span><span class="tag">&lt;<span class="title">br</span> /&gt;</span>
密码：    <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"password"</span> <span class="attribute">name</span>=<span class="value">"password"</span> /&gt;</span><span class="tag">&lt;<span class="title">br</span> /&gt;</span>
确认密码：<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"password"</span> <span class="attribute">name</span>=<span class="value">"password-repeat"</span> /&gt;</span><span class="tag">&lt;<span class="title">br</span> /&gt;</span>
        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"submit"</span> <span class="attribute">value</span>=<span class="value">"注册"</span> /&gt;</span>
<span class="tag">&lt;/<span class="title">form</span>&gt;</span>
<span class="vbscript">&lt;%- include footer %&gt;</span>
</pre></td></tr></table></figure>

<p>上面所做的工作简单的概括来说就是把整个 blog 的  header 和 footer 分离开，并按此建立相应的登陆，注册页面。</p>
<p>可以通过访问<a href="http://localhost:3000/" target="_blank">http://localhost:3000/</a> 来查看当前主页。</p>
<h2 id="mongo-db">mongo db</h2>
<p>首先是安装。mac下安装mongodb很简单。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre>brew <span class="operator"><span class="keyword">update</span>
brew install mongodb</span>
</pre></td></tr></table></figure>

<p>测试</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre>1
2
3
</pre></td><td class="code"><pre>mongo
&gt; db<span class="preprocessor">.test</span><span class="preprocessor">.save</span>({a:<span class="number">1</span>})
&gt; db<span class="preprocessor">.test</span><span class="preprocessor">.find</span>()
</pre></td></tr></table></figure>

<p>mongo db装上后 开始安装node js的依赖。</p>
<p>在 <strong><em>package.json</em></strong> 中加入。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="string">"mongodb"</span>:<span class="string">"*"</span>,
<span class="string">"connect-mongo"</span>:<span class="string">"*"</span>
</pre></td></tr></table></figure>

<p>运行</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>npm <span class="keyword">install</span>
</pre></td></tr></table></figure>

<p>安装完成后，我们就能够在程序中对mongo db进行操作了。</p>
<p>我们在blog下面新建 <strong><em>settings.js</em></strong> 用来存储我们blog程序的相关配置。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre>module.exports = { 
  cookieSecret: <span class="string">'myblog'</span>, 
  db: <span class="string">'blog'</span>, 
  host: <span class="string">'localhost'</span>
};
</pre></td></tr></table></figure>

<p>创建 <strong><em>models</em></strong> 目录并新建 js 文件 <strong><em>db.js</em></strong> 用来操作 db</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="keyword">var</span> settings = <span class="built_in">require</span>(<span class="string">'../settings'</span>),
    Db = <span class="built_in">require</span>(<span class="string">'mongodb'</span>).Db,
    Connection = <span class="built_in">require</span>(<span class="string">'mongodb'</span>).Connection,
    Server = <span class="built_in">require</span>(<span class="string">'mongodb'</span>).Server;
module.exports = <span class="keyword">new</span> Db(settings.db, <span class="keyword">new</span> Server(settings.host, Connection.DEFAULT_PORT, {}));
</pre></td></tr></table></figure>

<p>而Package <strong><em>connect-mongo</em></strong> 是用来存储会话信息到数据库。</p>
<p>在 <strong><em>app.js</em></strong> 中添加。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre>1
2
</pre></td><td class="code"><pre><span class="keyword">var</span> MongoStore = <span class="built_in">require</span>(<span class="string">'connect-mongo'</span>)(express);
<span class="keyword">var</span> settings = <span class="built_in">require</span>(<span class="string">'./settings'</span>);
</pre></td></tr></table></figure>

<p>同时在 <strong><em>app.use(express.methodOverride())</em></strong> 后面添加</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
</pre></td><td class="code"><pre>app<span class="preprocessor">.use</span>(express<span class="preprocessor">.cookieParser</span>())<span class="comment">;</span>
app<span class="preprocessor">.use</span>(express<span class="preprocessor">.session</span>({ 
      secret: settings<span class="preprocessor">.cookieSecret</span>, 
      store: new MongoStore({ 
      db: settings<span class="preprocessor">.db</span> 
   }) 
}))<span class="comment">;</span>
</pre></td></tr></table></figure>

<p>其中 express.cookieParser() 是 Cookie 解析的中间件。express.session() 则提供会话支持，设置它的 store 参数为 MongoStore 实例，把会话信息存储到数据库中，以避免丢失。
在后面的小节中，我们可以通过 req.session 获取当前用户的会话对象，以维护用户相关的信息。”
至此，数据库的配置工作完成了，后面我们就可以用数据库了。</p>
<h2 id="-">结论</h2>
<p>Express的代码结构看起来还是蛮清晰的，npm上的第三方的资源也很丰富。</p>
<p>由于本人是Express的初学者，所以整个 blog 的过程也是完全参考 <a href="http://cnodejs.org/topic/515b00096d382773061927de" target="_blank">【一起学node.js （一）】用node+express搭建多人博客</a> 这篇blog的内容，在此也感谢下原作者。</p>
<h2 id="-">参考</h2>
<p><a href="http://cnodejs.org/topic/515b00096d382773061927de" target="_blank">【一起学node.js （一）】用node+express搭建多人博客</a></p>
]]></content>
    <category scheme="nateriver520.github.io/tags/nodejs/" term="nodejs"/>
    <category scheme="nateriver520.github.io/tags/express/" term="express"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Mac OS 10.9 软件环境故障排查]]></title>
    <link href="nateriver520.github.io/2013/11/02/mac-os-109-软件环境故障排查/"/>
    <id>nateriver520.github.io/2013/11/02/mac-os-109-软件环境故障排查/</id>
    <published>2013-11-02T13:20:08.000Z</published>
    <updated>2013-11-02T13:21:55.000Z</updated>
    <content type="html"><![CDATA[<p>之前在10.7上搭配好了一系列的软件环境。</p>
<p>在升级到10.9后，基本上所有的软件环境都没有了。</p>
<p>试图通过 brew 安装 mongo db 也编译出错。本篇 blog 就是基于上述问题的一系列排查。</p>
<a id="more"></a>

<h3 id="brew">brew</h3>
<p>首先是查看 brew 是否有问题。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>brew doctor
</pre></td></tr></table></figure>

<p>然后按照 brew 列出的各项 warning fix。</p>
<p>这样的话再装 mongo db 就没问题了。</p>
<h3 id="rvm">rvm</h3>
<p>在继续装rvm的时候遇到安装完成后，始终找不到rvm的问题。</p>
<p>通过echo的方法，发现当前 Terminal 加载的配置位于 <strong><em>/etc/profile</em></strong></p>
<p>所以一开始 source 一下就好了。</p>
<p>这样就能成功的找到 rvm</p>
<h3 id="-">参考</h3>
<p><a href="http://www.interworks.com/blogs/ckaukis/2013/03/05/installing-ruby-200-rvm-and-homebrew-mac-os-x-108-mountain-lion" target="_blank">Installing Ruby 2.0.0 with RVM and Homebrew on Mac OS X 10.8 Mountain Lion</a></p>
<p><a href="http://railsapps.github.io/installrubyonrails-mac.html" target="_blank">Install Ruby on Rails · Mac OS X Mavericks</a></p>
]]></content>
    <category scheme="nateriver520.github.io/tags/macos/" term="macos"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[使用 Node.js 做 Function Test]]></title>
    <link href="nateriver520.github.io/2013/10/19/使用-nodejs-做-function-test/"/>
    <id>nateriver520.github.io/2013/10/19/使用-nodejs-做-function-test/</id>
    <published>2013-10-19T07:20:48.000Z</published>
    <updated>2013-11-02T15:51:46.000Z</updated>
    <content type="html"><![CDATA[<h2 id="info">Info</h2>
<p>上周 meeting 上同事说他们现在在用 java 写 function test，产生了很多冗余的代码，整个项目也变得比较臃肿。现在迫切需要个简单的模板项目能快速搭建function test。</p>
<p>后来我回去想了想，为什么我们非得用 java 来做 function test 呢? </p>
<p>Node.js 应该是个不错的选择，并且对 json 有着天然的支持，于是回去在 github 上随手一搜，还果真有相关的项目: <a href="https://github.com/masylum/testosterone" target="_blank">testosterone</a>，于是便有了这篇blog.</p>
<a id="more"></a>

<h2 id="server">Server</h2>
<p>要做demo，自然要有相应的server来支撑。</p>
<p>在这里我们选用Express作为server。</p>
<p>首先我们建立一个server的文件夹，新建package.json。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre>{
    "<span class="attribute">name</span>": <span class="value"><span class="string">"wine-cellar"</span></span>,
    "<span class="attribute">description</span>": <span class="value"><span class="string">"Wine Cellar Application"</span></span>,
    "<span class="attribute">version</span>": <span class="value"><span class="string">"0.0.1"</span></span>,
    "<span class="attribute">private</span>": <span class="value"><span class="literal">true</span></span>,
    "<span class="attribute">dependencies</span>": <span class="value">{
        "<span class="attribute">express</span>": <span class="value"><span class="string">"3.x"</span>
    </span>}
</span>}
</pre></td></tr></table></figure>

<p>接下来run command</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>npm <span class="keyword">install</span>
</pre></td></tr></table></figure>

<p>这样express就装上了。</p>
<p>我们实现几个简单的 get post 方法来做实验</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
</pre></td><td class="code"><pre>
<span class="keyword">var</span> express = require(<span class="string">'express'</span>)
  , app = express();

app.<span class="keyword">use</span>(express.bodyParser());

app.<span class="keyword">get</span>(<span class="string">'/hello'</span>, <span class="function"><span class="keyword">function</span><span class="params">(req, res)</span> {</span>
    res.send(<span class="string">"hello world"</span>);
});
 
app.<span class="keyword">get</span>(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(req, res)</span> {</span>
  setTimeout(<span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
    res.writeHead(<span class="number">200</span>, {<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>});
    res.end();
  }, <span class="number">200</span>);
});

app.<span class="keyword">get</span>(<span class="string">'/hi'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(req, res)</span> {</span>
  <span class="keyword">if</span> (req.param(<span class="string">'hello'</span>) !== <span class="literal">undefined</span>) {
    res.writeHead(<span class="number">200</span>, {<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>});
    res.end(<span class="string">'Hello!'</span>);
  } <span class="keyword">else</span> {
    res.writeHead(<span class="number">500</span>, {<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>});
    res.end(<span class="string">'use post instead'</span>);
  }
});

app.post(<span class="string">'/hi'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(req, res)</span> {</span>
  setTimeout(<span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
    res.writeHead(<span class="number">200</span>, {<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>});
    res.end(req.param(<span class="string">'message'</span>) || <span class="string">'message'</span>);
  }, <span class="number">100</span>);
});


app.<span class="keyword">get</span>(<span class="string">'/user'</span>, <span class="function"><span class="keyword">function</span><span class="params">(req, res)</span> {</span>
    res.send(
      [
        {name:<span class="string">'jack'</span>}, 
        {name:<span class="string">'tom'</span>}
      ]
    );
});

app.<span class="keyword">get</span>(<span class="string">'/user/:id'</span>, <span class="function"><span class="keyword">function</span><span class="params">(req, res)</span> {</span>
    res.send({
        id: <span class="number">1</span>, 
        name: <span class="string">"node js"</span>, 
        description: <span class="string">"I am node js"</span>
    });
});

app.post(<span class="string">'/user/edit'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(req, res)</span> {</span>
  setTimeout(<span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
    res.send({
      id:req.param(<span class="string">'id'</span>),
      status:<span class="number">1</span>
    });
  }, <span class="number">100</span>);
});


 
app.listen(<span class="number">3000</span>);
console.log(<span class="string">'Listening on port 3000...'</span>);
</pre></td></tr></table></figure>

<h2 id="testosterone">testosterone</h2>
<p>server 架设完毕，自然要开始做测试了。</p>
<p>这个 project 的接口的命名都挺优雅，直接上代码。</p>
<p>首先是测试基本的功能</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre>var testosterone = <span class="built_in">require</span>(<span class="string">'testosterone'</span>)({port: <span class="number">3000</span>})
  , <span class="built_in">assert</span> = testosterone.<span class="built_in">assert</span>;

testosterone
  .get(<span class="string">'/hello'</span>,<span class="function"><span class="keyword">function</span><span class="params">(res)</span></span>{
    <span class="built_in">assert</span>.equal(res.statusCode, <span class="number">200</span>);
  })

  .get(<span class="string">'/hi'</span>,<span class="function"><span class="keyword">function</span><span class="params">(res)</span></span>{
    <span class="built_in">assert</span>.equal(res.statusCode, <span class="number">500</span>);
  })

  .post(<span class="string">'/hi'</span>, {data: {message: <span class="string">'hola'</span>}}, {
    status: <span class="number">200</span>
    ,body: <span class="string">'hola'</span>
  });
</pre></td></tr></table></figure>

<p>然后针对上面模拟的user的get post 做简单的测试。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="code"><pre><span class="keyword">var</span> testosterone = <span class="built_in">require</span>(<span class="string">'testosterone'</span>)({port: <span class="number">3000</span>})
  , assert = testosterone.assert;

testosterone  
  .get(<span class="string">'/user'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(res)</span> {</span>
    <span class="keyword">var</span> expectRes = [
        {name:<span class="string">'jack'</span>}, 
        {name:<span class="string">'tom'</span>}
    ];

    assert.equal(res.statusCode, <span class="number">200</span>);
    assert.equal(<span class="built_in">JSON</span>.stringify(<span class="built_in">JSON</span>.parse(res.body)),<span class="built_in">JSON</span>.stringify(expectRes));
  })

  .get(<span class="string">'/user/1'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(res)</span> {</span>
    
    <span class="keyword">var</span> user = <span class="built_in">JSON</span>.parse(res.body);

    assert.equal(res.statusCode, <span class="number">200</span>);
    assert.equal(user.name, <span class="string">"node js"</span>);
    assert.equal(user.description,<span class="string">"I am node js"</span>);
  })
</pre></td></tr></table></figure>

<p>接下来，如果你想要针对每个test case 用 <strong>give when then</strong> 来描述的话，可以这样：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
</pre></td><td class="code"><pre><span class="keyword">var</span> testosterone = <span class="built_in">require</span>(<span class="string">'testosterone'</span>)({port: <span class="number">3000</span>, title: <span class="string">'test user api'</span>})
  , add = testosterone.add
  , assert = testosterone.assert;

testosterone
  .add(
    <span class="string">'GIVEN a user id  to /user/{id}  \n'</span> +
    <span class="string">'WHEN it have response user \n'</span> +
    <span class="string">'THEN it should return user json'</span>,

    <span class="function"><span class="keyword">function</span> <span class="params">(cb)</span> {</span>
      testosterone.get(<span class="string">'/user/1'</span>, cb(<span class="function"><span class="keyword">function</span> <span class="params">(res)</span> {</span>
        <span class="keyword">var</span> expectRes = {
            id: <span class="number">1</span>, 
            name: <span class="string">"node js"</span>, 
            description: <span class="string">"I am node js"</span>
        };

        assert.equal(res.statusCode, <span class="number">200</span>);
        assert.equal(<span class="built_in">JSON</span>.stringify(<span class="built_in">JSON</span>.parse(res.body)), <span class="built_in">JSON</span>.stringify(expectRes));
      }));
  })


  .add(
    <span class="string">'GIVEN a POST  a user info to /user/edit \n'</span> +
    <span class="string">'WHEN find modify success \n'</span> +
    <span class="string">'THEN it should resturn status 1'</span>,

    <span class="function"><span class="keyword">function</span> <span class="params">(cb)</span> {</span>
      testosterone.post(<span class="string">'/user/edit'</span>, {data: {id: <span class="number">1</span>, name: <span class="string">"change name"</span>}}, cb(<span class="function"><span class="keyword">function</span> <span class="params">(res)</span> {</span>
        <span class="keyword">var</span> res = <span class="built_in">JSON</span>.parse(res.body);
        assert.equal(res.status, <span class="number">1</span>);
      }));
    }
  ) 

  .run(<span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
    <span class="built_in">require</span>(<span class="string">'sys'</span>).print(<span class="string">'done!'</span>);
  });
</pre></td></tr></table></figure>

<h2 id="conclusion">Conclusion</h2>
<p>通过以上的代码，可以看出，同java 冗长的 http 头设置等，testosterone确实简单和优雅了不少。</p>
<p>testosterone 是个蛮不错的项目，作者写的文档简单易懂，在 test 文件夹里面也有很多测试代码。</p>
<p>本篇 blog 的 sample code 的放在 <a href="https://github.com/nateriver520/function-test-demo" target="_blank"><a href="https://github.com/nateriver520/function-test-demo">https://github.com/nateriver520/function-test-demo</a></a></p>
]]></content>
    <category scheme="nateriver520.github.io/tags/nodejs/" term="nodejs"/>
    <category scheme="nateriver520.github.io/tags/testosterone/" term="testosterone"/>
    <category scheme="nateriver520.github.io/tags/express/" term="express"/>
    <category scheme="nateriver520.github.io/tags/test/" term="test"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Build A Micro Team]]></title>
    <link href="nateriver520.github.io/2013/10/18/building-a-micro-team/"/>
    <id>nateriver520.github.io/2013/10/18/building-a-micro-team/</id>
    <published>2013-10-18T13:03:39.000Z</published>
    <updated>2013-11-03T04:05:18.000Z</updated>
    <content type="html"><![CDATA[<p>最近这两周一直在忙，忙到忘记回QQ和微信的程度，甚至有两天下班回来直接躺平，虽说忙碌但是也收获了不少。</p>
<h2 id="start">Start</h2>
<p>说起来有趣，最近在忙的这个项目最初是公司设立的用于工程师在业余时间开发的project，正式参与这个项目时正好是自己所在team的空闲期，并且对他们的team在tech talk介绍过的项目很感兴趣，就联系了他们team的leader，利用下班时间帮他们写项目。</p>
<h2 id="change">Change</h2>
<p>最初项目不紧不慢的进行，自己主要集中在业务逻辑方面，前期项目大部分code都是我在维护，直到高层越来越重视，于是项目的进度开始加快，并成立了一个Scrum Team来驱动项目。</p>
<p>同时我的manager也让我投入更多的时间在这个项目，因此我有大约70%的时间focus在这个项目，由于这是一个新的scrum team，大家之前都没有带领团队经验，所以我们一切从零开始。</p>
<a id="more"></a>

<h2 id="scrum">Scrum</h2>
<p>对于新的scrum team, 在我的强烈建议下，我们开始用trello管理tasks，并设定每两周一次的sprint planing。</p>
<p>但是scrum了两天后，我们发现在project的初期，往往变化非常快，所以每两周的sprint planing根本更不上变化，因此我们决定在每天下午的scrum meeting上，我们会加入一些新的task，并且按照项目的最新进展来重新的分配task。</p>
<blockquote>
<p>Project初期，Scrum能够提高团队的工作效率和进度，但是对于具体的操作，团队应当按照项目状况来灵活调节。</p>
</blockquote>
<p>而对于daily stand up，团队的成员大多都以简明扼要的方式陈述项目进展和出现的问题，以期最大程度的节省时间。所以每天team 5个成员的update再加上task的re-assign大约20min就能结束。</p>
<h2 id="milestone">Milestone</h2>
<p>由于这次项目是自己从初期就参与进来，并到项目的第一次release。</p>
<p>是自己看着项目从一个不成熟的project，到有了自己的CI，Tasks，Api，甚至有了dashboard和简单的monitor。</p>
<p>所以当自己在项目第一次向外push data的时候觉得无比的骄傲，那种感觉可以用我们老大的一句话来形容恰巧不过。</p>
<blockquote>
<p>It is like a new baby born by you.   :)</p>
</blockquote>
<h2 id="keep-learning-and-keep-gaining">Keep Learning and Keep Gaining</h2>
<blockquote>
<p>你永远不知道你现在做的，以后会对你产生很大的影响。</p>
</blockquote>
<p>这是我这次project的另外一个收获。</p>
<p>随着项目的深入，我在项目的基础上渐渐的有了一个idea。并我在项目release的这天，我利用早上2小时完成了我第一个专利的demo，在项目release前的两小时，向公司内部的系统提交了专利申请。</p>
<p>可以说没有这次项目的参与，自己也很难有这样的idea，更别论到最后专利的提交，</p>
<p>因此无论最后专利申请是否通过，对自己来说都是不小的收获。</p>
<h2 id="conclusion">Conclusion</h2>
<p>无论如何，这次Scrum经历是个非常难得的经历，自己收获颇丰。</p>
<p>在此感谢下我的team member :) 感谢大家的hard work。</p>
]]></content>
    <category scheme="nateriver520.github.io/tags/Scrum/" term="Scrum"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Memcached 使用与简单监测]]></title>
    <link href="nateriver520.github.io/2013/10/13/memcached-使用与简单检测/"/>
    <id>nateriver520.github.io/2013/10/13/memcached-使用与简单检测/</id>
    <published>2013-10-13T06:35:18.000Z</published>
    <updated>2013-10-28T03:46:45.000Z</updated>
    <content type="html"><![CDATA[<h2 id="introduce">Introduce</h2>
<p><a href="http://memcached.org/" target="_blank">Memcached</a>作为一个高并发内存Cached系统被很多大公司使用，最近也一直在用Memcached做项目也积累了一些相关经验。</p>
<p>本篇博文主要记录Memcached的一些基本使用和简单的Monitor</p>
<h2 id="install">Install</h2>
<p>Memcached的安装很简单，在Ubuntu下面一行命令搞定。</p>
<figure class="highlight Shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="built_in">sudo</span> apt-get install memcached
</pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="start">Start</h2>
<p>实际使用的时候，memcached需要调整内存大小和端口号等命令，则启动的使用时用以下的Command就行。</p>
<figure class="highlight Shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>/usr/<span class="built_in">local</span>/bin/memcached <span class="attribute">-p</span> <span class="number">11211</span> <span class="attribute">-m</span> <span class="number">64</span>m <span class="attribute">-d</span>
</pre></td></tr></table></figure>

<ul>
<li>-p 指定端口号</li>
<li>-m 指定内存大小</li>
<li>-d 作为daemon在后台启动</li>
<li>如果想trouble shotting 则加 -vv</li>
</ul>
<h2 id="test">Test</h2>
<p>Test也很简单，安装官网的命令就行</p>
<figure class="highlight Shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>telnet localhost 11211
</pre></td></tr></table></figure>

<p>里面就能Get和Set了。</p>
<h2 id="use-in-java">Use in Java</h2>
<p>由于项目是java的，所以以java为例子来介绍Java下Memcached的使用。</p>
<p>Java下Memcached的客户端很多，这里介绍spymemcached</p>
<p>spymemcached的使用很简单，在maven项目下面，我们加入如下依赖。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">dependency</span>&gt;</span>
    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>net.spy<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spymemcached<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
    <span class="tag">&lt;<span class="title">version</span>&gt;</span>2.9.1<span class="tag">&lt;/<span class="title">version</span>&gt;</span>
<span class="tag">&lt;/<span class="title">dependency</span>&gt;</span>
</pre></td></tr></table></figure>

<p>这样我们就能对Memcached操作了。</p>
<figure class="highlight Java"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="code"><pre>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Memcached</span> {</span>

    <span class="keyword">private</span> <span class="keyword">static</span> MemcachedClient MEMCACHED_CLIENT;

    <span class="keyword">static</span> {
        <span class="keyword">try</span> {
            MEMCACHED_CLIENT = <span class="keyword">new</span> MemcachedClient(
                    AddrUtil.getAddresses(<span class="string">"localhost1:11211 localhost2:11211"</span>));
        } <span class="keyword">catch</span> (Exception e) {
            System.err.println(<span class="string">"Cannot init MEMCACHED Memcached Client"</span>);
        }
    }

    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">set</span>(String key, String value，Integer expireTime ) <span class="keyword">throws</span> Exception {
        MEMCACHED_CLIENT.set(key, expireTime, value);
    }

    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">get</span>(String key) <span class="keyword">throws</span> Exception {
        Object value = MEMCACHED_CLIENT.get(key);
        <span class="keyword">if</span> (<span class="keyword">null</span> != value)
            <span class="keyword">return</span> value.toString();
        <span class="keyword">return</span> <span class="keyword">null</span>;
    }

}
</pre></td></tr></table></figure>

<h2 id="monitor">Monitor</h2>
<p>我们可以通过以下简单的命令得知Memcached的运行状况,以此为扩充可以实现简单的Memcached检测shell。</p>
<figure class="highlight Shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>  watch <span class="string">"echo stats | nc 127.0.0.1 11211"</span>
</pre></td></tr></table></figure>

<h2 id="conclusion">Conclusion</h2>
<p>Memcached实际使用下来简单易用，各个平台上面也有相应的Client.</p>
<p>但有时高并发可能会出现Timeout的情况，导致缓冲没办法命中的情况，具体原因还需要进一步调查。</p>
<p>Memcahed的作者最近用Go语言去写了<a href="https://github.com/golang/groupcache" target="_blank">groupcache</a>很值得关注。</p>
]]></content>
    <category scheme="nateriver520.github.io/tags/Memcached/" term="Memcached"/>
    <category scheme="nateriver520.github.io/tags/Java/" term="Java"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[New Start]]></title>
    <link href="nateriver520.github.io/2013/10/13/new-start/"/>
    <id>nateriver520.github.io/2013/10/13/new-start/</id>
    <published>2013-10-12T17:19:09.000Z</published>
    <updated>2013-10-19T08:51:48.000Z</updated>
    <content type="html"><![CDATA[<p>一直以来自己都没有记录的习惯，平常最多在evernote上记录些重要的信息。</p>
<p>后来读了一篇blog说整理知识的重要性才恍然大悟，一直以来自己都是试图让一门技术快速上手，而记录的很少，等时间一久，很多用过的东西就忘记了。</p>
<p>比如之前在EMC实习时写过很长时间的python，现在也忘记的七七八八。再加上自己在新的公司入职快6个月，各种新的信息铺面而来，更需要整理和提炼。</p>
<p>So 自己做了以下几个方面试图补救以前不爱记录，不爱整理的坏习惯。</p>
<ul>
<li>整理自己的evernote笔记 (70%)</li>
<li>建立自己code snippet  (100%)</li>
<li>在github上建立自己算法练习project (100%)</li>
</ul>
<a id="more"></a>

<p>接下来的目标是：</p>
<ul>
<li>每周整理一次自己的笔记心得</li>
<li>每个月出一篇blog</li>
<li>每周写算法</li>
</ul>
]]></content>
    <category scheme="nateriver520.github.io/tags/life/" term="life"/>
  </entry>
</feed>
