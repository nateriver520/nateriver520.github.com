<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Nateriver's Blog]]></title>
  <subtitle><![CDATA[Learning and Thinking]]></subtitle>
  <link href="nateriver520.github.io/atom.xml" rel="self"/>
  <link href="nateriver520.github.io"/>
  <updated>2013-11-02T13:22:30.721Z</updated>
  <id>nateriver520.github.io/</id>
  <author>
    <name><![CDATA[Shuo Yang]]></name>
    <email><![CDATA[shuo.yang@yahoo.com]]></email>
  </author>
  <generator uri="http://zespia.tw/hexo">Hexo</generator>
  <entry>
    <title type="html"><![CDATA[Mac OS 10.9 软件环境故障排查]]></title>
    <link href="nateriver520.github.io/2013/11/02/mac-os-109-软件环境故障排查/"/>
    <id>nateriver520.github.io/2013/11/02/mac-os-109-软件环境故障排查/</id>
    <published>2013-11-02T13:20:08.000Z</published>
    <updated>2013-11-02T13:21:55.000Z</updated>
    <content type="html"><![CDATA[<p>之前在10.7上搭配好了一系列的软件环境。</p>
<p>在升级到10.9后，基本上所有的软件环境都没有了。</p>
<p>试图通过 brew 安装 mongo db 也编译出错。本篇 blog 就是基于上述问题的一系列排查。</p>
<a id="more"></a>

<h3>brew</h3>
<p>首先是查看 brew 是否有问题。</p>
<figure class="highlight lang-shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">brew</span> doctor
</pre></td></tr></table></figure>

<p>然后按照 brew 列出的各项 warning fix。</p>
<p>这样的话再装 mongo db 就没问题了。</p>
<h3>rvm</h3>
<p>在继续装rvm的时候遇到安装完成后，始终找不到rvm的问题。</p>
<p>通过echo的方法，发现当前 Terminal 加载的配置位于 <strong><em>/etc/profile</em></strong></p>
<p>所以一开始 source 一下就好了。</p>
<p>这样就能成功的找到 rvm</p>
<h3>参考</h3>
<p><a href="http://www.interworks.com/blogs/ckaukis/2013/03/05/installing-ruby-200-rvm-and-homebrew-mac-os-x-108-mountain-lion" target="_blank">Installing Ruby 2.0.0 with RVM and Homebrew on Mac OS X 10.8 Mountain Lion</a></p>
<p><a href="http://railsapps.github.io/installrubyonrails-mac.html" target="_blank">Install Ruby on Rails · Mac OS X Mavericks</a></p>
]]></content>
    <category scheme="nateriver520.github.io/tags/macos/" term="macos"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[使用 Node.js 做 Function Test]]></title>
    <link href="nateriver520.github.io/2013/10/19/使用-nodejs-做-function-test/"/>
    <id>nateriver520.github.io/2013/10/19/使用-nodejs-做-function-test/</id>
    <published>2013-10-19T07:20:48.000Z</published>
    <updated>2013-10-19T08:51:43.000Z</updated>
    <content type="html"><![CDATA[<h2>Info</h2>
<p>上周 meeting 上同事说他们现在在用 java 写 function test，产生了很多冗余的代码，整个项目也变得比较臃肿。现在迫切需要个简单的模板项目能快速搭建function test。</p>
<p>后来我回去想了想，为什么我们非得用 java 来做 function test 呢? </p>
<p>Node.js 应该是个不错的选择，并且对 json 有着天然的支持，于是回去在 github 上随手一搜，还果真有相关的项目: <a href="https://github.com/masylum/testosterone" target="_blank">testosterone</a>，于是便有了这篇blog.</p>
<a id="more"></a>

<h2>Server</h2>
<p>要做demo，自然要有相应的server来支撑。</p>
<p>在这里我们选用Express作为server。</p>
<p>首先我们建立一个server的文件夹，新建package.json。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre>{
    "<span class="attribute">name</span>": <span class="value"><span class="string">"wine-cellar"</span></span>,
    "<span class="attribute">description</span>": <span class="value"><span class="string">"Wine Cellar Application"</span></span>,
    "<span class="attribute">version</span>": <span class="value"><span class="string">"0.0.1"</span></span>,
    "<span class="attribute">private</span>": <span class="value"><span class="literal">true</span></span>,
    "<span class="attribute">dependencies</span>": <span class="value">{
        "<span class="attribute">express</span>": <span class="value"><span class="string">"3.x"</span>
    }</span>
}</span>
</pre></td></tr></table></figure>

<p>接下来run command</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">npm</span> install
</pre></td></tr></table></figure>

<p>这样express就装上了。</p>
<p>我们实现几个简单的 get post 方法来做实验</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
</pre></td><td class="code"><pre>
var express = require(<span class="string">'express'</span>)
  , app = express();

<span class="transposed_variable">app.</span>use(<span class="transposed_variable">express.</span>bodyParser());

<span class="transposed_variable">app.</span>get(<span class="string">'/hello'</span>, <span class="keyword">function</span>(req, res) <span class="cell">{
    res.send("hello world");
}</span>);
 
<span class="transposed_variable">app.</span>get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(req, res)</span> {</span>
  setTimeout(<span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
    <span class="transposed_variable">res.</span>writeHead(<span class="number">200</span>, <span class="cell">{<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>}</span>);
    <span class="transposed_variable">res.</span><span class="keyword">end</span>();
  }, <span class="number">200</span>);
});

<span class="transposed_variable">app.</span>get(<span class="string">'/hi'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(req, res)</span> {</span>
  <span class="keyword">if</span> (<span class="transposed_variable">req.</span>param(<span class="string">'hello'</span>) !== undefined) <span class="cell">{
    res.writeHead(<span class="number">200</span>, {<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>}</span>);
    <span class="transposed_variable">res.</span><span class="keyword">end</span>(<span class="string">'Hello!'</span>);
  } <span class="keyword">else</span> <span class="cell">{
    res.writeHead(<span class="number">500</span>, {<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>}</span>);
    <span class="transposed_variable">res.</span><span class="keyword">end</span>(<span class="string">'use post instead'</span>);
  }
});

<span class="transposed_variable">app.</span>post(<span class="string">'/hi'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(req, res)</span> {</span>
  setTimeout(<span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
    <span class="transposed_variable">res.</span>writeHead(<span class="number">200</span>, <span class="cell">{<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>}</span>);
    <span class="transposed_variable">res.</span><span class="keyword">end</span>(<span class="transposed_variable">req.</span>param(<span class="string">'message'</span>) || <span class="string">'message'</span>);
  }, <span class="number">100</span>);
});


<span class="transposed_variable">app.</span>get(<span class="string">'/user'</span>, <span class="keyword">function</span>(req, res) <span class="cell">{
    res.send(
      [
        {name:<span class="string">'jack'</span>}</span>, 
        <span class="cell">{name:<span class="string">'tom'</span>}</span>
      ]
    );
});

<span class="transposed_variable">app.</span>get(<span class="string">'/user/:id'</span>, <span class="keyword">function</span>(req, res) <span class="cell">{
    res.send({
        id: <span class="number">1</span>, 
        name: "node js", 
        description: "I am node js"
    }</span>);
});

<span class="transposed_variable">app.</span>post(<span class="string">'/user/edit'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(req, res)</span> {</span>
  setTimeout(<span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
    <span class="transposed_variable">res.</span>send(<span class="cell">{
      id:req.param(<span class="string">'id'</span>),
      status:<span class="number">1</span>
    }</span>);
  }, <span class="number">100</span>);
});


 
<span class="transposed_variable">app.</span>listen(<span class="number">3000</span>);
<span class="transposed_variable">console.</span><span class="built_in">log</span>(<span class="string">'Listening on port 3000...'</span>);
</pre></td></tr></table></figure>

<h2>testosterone</h2>
<p>server 架设完毕，自然要开始做测试了。</p>
<p>这个 project 的接口的命名都挺优雅，直接上代码。</p>
<p>首先是测试基本的功能</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="title">var</span> testosterone = require('testosterone')({port: <span class="number">3000</span>})
  , assert = testosterone.assert;

<span class="title">testosterone</span>
  .get('/hello',function(res){
    assert.equal(res.statusCode, <span class="number">200</span>);
  })

  .get('/hi',function(res){
    assert.equal(res.statusCode, <span class="number">500</span>);
  })

  .post('/hi', {<span class="typedef"><span class="keyword">data</span>: <span class="container">{<span class="title">message</span>: '<span class="title">hola'</span>}</span>}, <span class="container">{
    <span class="title">status</span>: 200
    ,<span class="title">body</span>: '<span class="title">hola'</span>
  }</span>);</span>
</pre></td></tr></table></figure>

<p>然后针对上面模拟的user的get post 做简单的测试。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="code"><pre>var testosterone = <span class="built_in">require</span>(<span class="string">'testosterone'</span>)({port: <span class="number">3000</span>})
  , <span class="built_in">assert</span> = testosterone.<span class="built_in">assert</span>;

testosterone  
  .get(<span class="string">'/user'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(res)</span></span> {
    var expectRes = [
        {name:<span class="string">'jack'</span>}, 
        {name:<span class="string">'tom'</span>}
    ];

    <span class="built_in">assert</span>.equal(res.statusCode, <span class="number">200</span>);
    <span class="built_in">assert</span>.equal(JSON.stringify(JSON.parse(res.body)),JSON.stringify(expectRes));
  })

  .get(<span class="string">'/user/1'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(res)</span></span> {
    
    var user = JSON.parse(res.body);

    <span class="built_in">assert</span>.equal(res.statusCode, <span class="number">200</span>);
    <span class="built_in">assert</span>.equal(user.name, <span class="string">"node js"</span>);
    <span class="built_in">assert</span>.equal(user.description,<span class="string">"I am node js"</span>);
  })
</pre></td></tr></table></figure>

<p>接下来，如果你想要针对每个test case 用 <strong>give when then</strong> 来描述的话，可以这样：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
</pre></td><td class="code"><pre>var testosterone = require(<span class="string">'testosterone'</span>)(<span class="cell">{port: <span class="number">3000</span>, title: <span class="string">'test user api'</span>}</span>)
  , add = <span class="transposed_variable">testosterone.</span>add
  , assert = <span class="transposed_variable">testosterone.</span>assert;

testosterone
  .add(
    <span class="string">'GIVEN a user id  to /user/{id}  \n'</span> +
    <span class="string">'WHEN it have response user \n'</span> +
    <span class="string">'THEN it should return user json'</span>,

    <span class="function"><span class="keyword">function</span> <span class="params">(cb)</span> {</span>
      <span class="transposed_variable">testosterone.</span>get(<span class="string">'/user/1'</span>, cb(<span class="function"><span class="keyword">function</span> <span class="params">(res)</span> {</span>
        var expectRes = <span class="cell">{
            id: <span class="number">1</span>, 
            name: "node js", 
            description: "I am node js"
        }</span>;

        <span class="transposed_variable">assert.</span>equal(<span class="transposed_variable">res.</span>statusCode, <span class="number">200</span>);
        <span class="transposed_variable">assert.</span>equal(<span class="transposed_variable">JSON.</span>stringify(<span class="transposed_variable">JSON.</span>parse(<span class="transposed_variable">res.</span>body)), <span class="transposed_variable">JSON.</span>stringify(expectRes));
      }));
  })


  .add(
    <span class="string">'GIVEN a POST  a user info to /user/edit \n'</span> +
    <span class="string">'WHEN find modify success \n'</span> +
    <span class="string">'THEN it should resturn status 1'</span>,

    <span class="function"><span class="keyword">function</span> <span class="params">(cb)</span> {</span>
      <span class="transposed_variable">testosterone.</span>post(<span class="string">'/user/edit'</span>, <span class="cell">{data: {id: <span class="number">1</span>, name: "change name"}</span>}, cb(<span class="function"><span class="keyword">function</span> <span class="params">(res)</span> {</span>
        var res = <span class="transposed_variable">JSON.</span>parse(<span class="transposed_variable">res.</span>body);
        <span class="transposed_variable">assert.</span>equal(<span class="transposed_variable">res.</span>status, <span class="number">1</span>);
      }));
    }
  ) 

  .run(<span class="function"><span class="keyword">function</span> <span class="params">()</span> {</span>
    require(<span class="string">'sys'</span>).print(<span class="string">'done!'</span>);
  });
</pre></td></tr></table></figure>

<h2>Conclusion</h2>
<p>通过以上的代码，可以看出，同java 冗长的 http 头设置等，testosterone确实简单和优雅了不少。</p>
<p>testosterone 是个蛮不错的项目，作者写的文档简单易懂，在 test 文件夹里面也有很多测试代码。</p>
<p>本篇 blog 的 sample code 的放在 <a href="https://github.com/nateriver520/function-test-demo" target="_blank"><a href="https://github.com/nateriver520/function-test-demo">https://github.com/nateriver520/function-test-demo</a></a></p>
]]></content>
    <category scheme="nateriver520.github.io/tags/nodejs/" term="nodejs"/>
    <category scheme="nateriver520.github.io/tags/testosterone/" term="testosterone"/>
    <category scheme="nateriver520.github.io/tags/express/" term="express"/>
    <category scheme="nateriver520.github.io/tags/test/" term="test"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Build A Micro Team]]></title>
    <link href="nateriver520.github.io/2013/10/18/building-a-micro-team/"/>
    <id>nateriver520.github.io/2013/10/18/building-a-micro-team/</id>
    <published>2013-10-18T13:03:39.000Z</published>
    <updated>2013-10-19T08:52:05.000Z</updated>
    <content type="html"><![CDATA[<p>最近这两周一直在忙，忙到忘记回QQ和微信的程度，甚至有两天下班回来直接躺平，虽说忙碌但是也收获了不少。</p>
<h2>Start</h2>
<p>说起来有趣，最近在忙的这个项目最初是公司设立的用于工程师在业余时间开发的project，正式参与这个项目时正好是自己所在team的空闲期，并且对他们的team在tech talk介绍过的项目很感兴趣，就联系了他们team的leader，利用下班时间帮他们写项目。</p>
<h2>Change</h2>
<p>最初项目不紧不慢的进行，自己主要集中在业务逻辑方面，前期项目大部分code都是我在维护，直到高层越来越重视，于是项目的进度开始加快，并成立了一个Scrum Team来驱动项目。</p>
<p>同时我的manager也让我投入更多的时间在这个项目，因此我有大约70%的时间focus在这个项目，由于这是一个新的scrum team，大家之前都没有带领团队经验，所以我们一切从零开始。</p>
<a id="more"></a>

<h2>Scrum</h2>
<p>对于新的scrum team, 在我的强烈建议下，我们开始用trello管理tasks，并设定每两周一次的sprint planing。</p>
<p>但是scrum了两天后，我们发现在project的初期，往往变化非常快，所以每两周的sprint planing根本更不上变化，因此我们决定在每天下午的scrum meeting上，我们会加入一些新的task，并且按照项目的最新进展来重新的分配task。</p>
<blockquote>
<p>Project初期，Scrum能够提高团队的工作效率和进度，但是对于具体的操作，团队应当按照项目状况来灵活调节。</p>
</blockquote>
<p>而对于daily stand up，团队的成员大多都以简明扼要的方式陈述项目进展和出现的问题，以期最大程度的节省时间。所以每天team 5个成员的update再加上task的re-assign大约20min就能结束。</p>
<h2>Milestone</h2>
<p>由于这次项目是自己从初期就参与进来，并到项目的第一次realse。</p>
<p>是自己看着项目从一个不成熟的project，到有了自己的CI，Tasks，Api，甚至有了dashboard和简单的monitor。</p>
<p>所以当自己在项目第一次向外push data的时候觉得无比的骄傲，那种感觉可以用我们老大的一句话来形容恰巧不过。</p>
<blockquote>
<p>It is like a new baby born by you.   :)</p>
</blockquote>
<h2>Keep Learning and Keep Gaining</h2>
<blockquote>
<p>你永远不知道你现在做的，以后会对你产生很大的影响。</p>
</blockquote>
<p>这是我这次project的另外一个收获。</p>
<p>随着项目的深入，我在项目的基础上渐渐的有了一个idea。并我在项目realse的这天，我利用早上2小时完成了我第一个专利的demo，在项目realse前的两小时，向公司内部的系统提交了专利申请。</p>
<p>可以说没有这次项目的参与，自己也很难有这样的idea，更别论到最后专利的提交，</p>
<p>因此无论最后专利申请是否通过，对自己来说都是不小的收获。</p>
<h2>Conclusion</h2>
<p>无论如何，这次Scrum经历是个非常难得的经历，自己收获颇丰。</p>
<p>在此感谢下我的team member :) 感谢大家的hard work。</p>
]]></content>
    <category scheme="nateriver520.github.io/tags/Scrum/" term="Scrum"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[Memcached 使用与简单监测]]></title>
    <link href="nateriver520.github.io/2013/10/13/memcached-使用与简单检测/"/>
    <id>nateriver520.github.io/2013/10/13/memcached-使用与简单检测/</id>
    <published>2013-10-13T06:35:18.000Z</published>
    <updated>2013-10-28T03:46:45.000Z</updated>
    <content type="html"><![CDATA[<h2>Introduce</h2>
<p><a href="http://memcached.org/" target="_blank">Memcached</a>作为一个高并发内存Cached系统被很多大公司使用，最近也一直在用Memcached做项目也积累了一些相关经验。</p>
<p>本篇博文主要记录Memcached的一些基本使用和简单的Monitor</p>
<h2>Install</h2>
<p>Memcached的安装很简单，在Ubuntu下面一行命令搞定。</p>
<figure class="highlight lang-Shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>su<span class="operator"><span class="keyword">do</span> apt-<span class="keyword">get</span> install memcached
</pre></td></tr></table></figure>

<a id="more"></a>

<h2>Start</h2>
<p>实际使用的时候，memcached需要调整内存大小和端口号等命令，则启动的使用时用以下的Command就行。</p>
<figure class="highlight lang-Shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="comment">/usr/local/bin/memcached</span> <span class="literal">-</span><span class="comment">p</span> <span class="comment">11211</span> <span class="literal">-</span><span class="comment">m</span> <span class="comment">64m</span> <span class="literal">-</span><span class="comment">d
</pre></td></tr></table></figure>

<ul>
<li>-p 指定端口号</li>
<li>-m 指定内存大小</li>
<li>-d 作为daemon在后台启动</li>
<li>如果想trouble shotting 则加 -vv</li>
</ul>
<h2>Test</h2>
<p>Test也很简单，安装官网的命令就行</p>
<figure class="highlight lang-Shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre><span class="title">telnet</span> localhost <span class="number">11211</span>
</pre></td></tr></table></figure>

<p>里面就能Get和Set了。</p>
<h2>Use in Java</h2>
<p>由于项目是java的，所以以java为例子来介绍Java下Memcached的使用。</p>
<p>Java下Memcached的客户端很多，这里介绍spymemcached</p>
<p>spymemcached的使用很简单，在maven项目下面，我们加入如下依赖。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre>1
2
3
4
5
</pre></td><td class="code"><pre><span class="tag">&lt;<span class="title">dependency</span>&gt;</span>
    <span class="tag">&lt;<span class="title">groupId</span>&gt;</span>net.spy<span class="tag">&lt;/<span class="title">groupId</span>&gt;</span>
    <span class="tag">&lt;<span class="title">artifactId</span>&gt;</span>spymemcached<span class="tag">&lt;/<span class="title">artifactId</span>&gt;</span>
    <span class="tag">&lt;<span class="title">version</span>&gt;</span>2.9.1<span class="tag">&lt;/<span class="title">version</span>&gt;</span>
<span class="tag">&lt;/<span class="title">dependency</span>&gt;</span>
</pre></td></tr></table></figure>

<p>这样我们就能对Memcached操作了。</p>
<figure class="highlight lang-Java"><table><tr><td class="gutter"><pre>1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="code"><pre>
<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Memcached</span> {</span>

    <span class="keyword">private</span> <span class="keyword">static</span> MemcachedClient MEMCACHED_CLIENT;

    <span class="keyword">static</span> {
        <span class="keyword">try</span> {
            MEMCACHED_CLIENT = <span class="keyword">new</span> MemcachedClient(
                    AddrUtil.getAddresses(<span class="string">"localhost1:11211 localhost2:11211"</span>));
        } <span class="keyword">catch</span> (Exception e) {
            System.err.println(<span class="string">"Cannot init MEMCACHED Memcached Client"</span>);
        }
    }

    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> set(String key, String value，Integer expireTime ) <span class="keyword">throws</span> Exception {
        MEMCACHED_CLIENT.set(key, expireTime, value);
    }

    <span class="keyword">public</span> <span class="keyword">static</span> String get(String key) <span class="keyword">throws</span> Exception {
        Object value = MEMCACHED_CLIENT.get(key);
        <span class="keyword">if</span> (<span class="keyword">null</span> != value)
            <span class="keyword">return</span> value.toString();
        <span class="keyword">return</span> <span class="keyword">null</span>;
    }

}
</pre></td></tr></table></figure>

<h2>Monitor</h2>
<p>我们可以通过以下简单的命令得知Memcached的运行状况,以此为扩充可以实现简单的Memcached检测shell。</p>
<figure class="highlight lang-Shell"><table><tr><td class="gutter"><pre>1
</pre></td><td class="code"><pre>  <span class="title">watch</span> <span class="string">"echo stats | nc 127.0.0.1 11211"</span>
</pre></td></tr></table></figure>

<h2>Conclusion</h2>
<p>Memcached实际使用下来简单易用，各个平台上面也有相应的Client.</p>
<p>但有时高并发可能会出现Timeout的情况，导致缓冲没办法命中的情况，具体原因还需要进一步调查。</p>
<p>Memcahed的作者最近用Go语言去写了<a href="https://github.com/golang/groupcache" target="_blank">groupcache</a>很值得关注。</p>
]]></content>
    <category scheme="nateriver520.github.io/tags/Memcached/" term="Memcached"/>
    <category scheme="nateriver520.github.io/tags/Java/" term="Java"/>
  </entry>
  <entry>
    <title type="html"><![CDATA[New Start]]></title>
    <link href="nateriver520.github.io/2013/10/13/new-start/"/>
    <id>nateriver520.github.io/2013/10/13/new-start/</id>
    <published>2013-10-12T17:19:09.000Z</published>
    <updated>2013-10-19T08:51:48.000Z</updated>
    <content type="html"><![CDATA[<p>一直以来自己都没有记录的习惯，平常最多在evernote上记录些重要的信息。</p>
<p>后来读了一篇blog说整理知识的重要性才恍然大悟，一直以来自己都是试图让一门技术快速上手，而记录的很少，等时间一久，很多用过的东西就忘记了。</p>
<p>比如之前在EMC实习时写过很长时间的python，现在也忘记的七七八八。再加上自己在新的公司入职快6个月，各种新的信息铺面而来，更需要整理和提炼。</p>
<p>So 自己做了以下几个方面试图补救以前不爱记录，不爱整理的坏习惯。</p>
<ul>
<li>整理自己的evernote笔记 (70%)</li>
<li>建立自己code snippet  (100%)</li>
<li>在github上建立自己算法练习project (100%)</li>
</ul>
<a id="more"></a>

<p>接下来的目标是：</p>
<ul>
<li>每周整理一次自己的笔记心得</li>
<li>每个月出一篇blog</li>
<li>每周写算法</li>
</ul>
]]></content>
    <category scheme="nateriver520.github.io/tags/life/" term="life"/>
  </entry>
</feed>
